import asyncio
import httpx
from scrapy import Selector
from fastapi import FastAPI, Request
from datetime import datetime, timedelta
from urllib.parse import parse_qsl

app = FastAPI()

LOGIN_URL = "https://partner.elliemd.com/MemberToolsDotNet/Login/FirestormLogin.aspx"


async def login(username: str, password: str, session: httpx.AsyncClient):
    r = await session.get(LOGIN_URL)
    res = Selector(text=r.text)
    viewstate = res.css("#__VIEWSTATE::attr(value)").get()
    event_validation = res.css("#__EVENTVALIDATION::attr(value)").get()
    viewstate_gen = res.css("#__VIEWSTATEGENERATOR::attr(value)").get()

    payload = {
        "__LASTFOCUS": "",
        "__EVENTTARGET": "",
        "__EVENTARGUMENT": "",
        "__VIEWSTATE": viewstate,
        "__VIEWSTATEGENERATOR": viewstate_gen,
        "__EVENTVALIDATION": event_validation,
        "txtLostEmailAddress": "",
        "txtRPDealerURL": "",
        "txtRPDealerID": "",
        "txtDealerID": username,
        "Password": password,
        "cboCountry": "USA",
        "btnLogin": "Login",
    }

    headers = {
        "content-type": "application/x-www-form-urlencoded",
        "origin": "https://partner.elliemd.com",
        "referer": LOGIN_URL,
        "user-agent": (
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) "
            "AppleWebKit/537.36 (KHTML, like Gecko) "
            "Chrome/139.0.0.0 Safari/537.36"
        ),
    }

    print("Logging in...")
    r = await session.post(LOGIN_URL, data=payload, headers=headers)
    if "FirestormLogin" in r.text or "Invalid" in r.text:
        print("❌ Login failed")
        return {"status": False, "html": r.text[:500]}

    print("✅ Login successful")
    return {"status": True, "cookies": session.cookies}

ORDER_HISTORY_URL = "https://partner.elliemd.com/MemberToolsDotNet/Reports/FirestormOrderHistoryV4.aspx"
LEADS_URL = "https://partner.elliemd.com/MemberToolsDotNet/Reports/FirestormPersonalCustomers.aspx"
async def fetch_listing(session: httpx.AsyncClient, customer_name: str):
    r = await session.get(ORDER_HISTORY_URL)
    sel = Selector(text=r.text)
    viewstate = sel.css("#__VIEWSTATE::attr(value)").get()
    viewstate_gen = sel.css("#__VIEWSTATEGENERATOR::attr(value)").get()
    event_validation = sel.css("#__EVENTVALIDATION::attr(value)").get()

    query = """Timeout_CountryID=USA&ctl00_RadScriptManager1_TSM=%3B%3BSystem.Web.Extensions%2C%20Version%3D4.0.0.0%2C%20Culture%3Dneutral%2C%20PublicKeyToken%3D31bf3856ad364e35%3Aen-US%3A95047a2c-8908-49e3-b68e-d249be89f134%3Aea597d4b%3Ab25378d2%3BTelerik.Web.UI%2C%20Version%3D2024.1.131.45%2C%20Culture%3Dneutral%2C%20PublicKeyToken%3D121fae78165ba3d4%3Aen-US%3A9948a144-ff46-44f4-9ae0-6f54d8eaff7b%3A16e4e7cd%3Aed16cbdc%3A4877f69a%3A33715776%3A86526ba7%3A874f8ea2%3Af7645509%3A24ee1bba%3Af46195d3%3A2003d0b8%3Ac128760b%3A88144a7a%3A1e771326%3Aaa288e2d%3Ab092aa46%3A7c926187%3A8674cba1%3Ab7778d6c%3Ac08e9f8a%3Aa51ee93e%3A59462f1%3A6d43f6d9%3Addbfcb67&__EVENTTARGET=&__EVENTARGUMENT=&__VIEWSTATE=%2FwEPDwUKLTc0NTk4MzUwMQ9kFgJmDw8WBB4PX19BbnRpWHNyZlRva2VuBSA0MGMxMGQ0MWMyMDI0OTlhYjcxY2FhOGZiMmI1ZjNlYR4SX19BbnRpWHNyZlVzZXJOYW1lZWQWBGYPZBYKAggPFgIeBGhyZWYFH1N0eWxlcy5jc3M%2FdD02Mzg5MjI4OTI4NzQ4MTQzNDBkAgkPFgIfAgUjZnMtYW5pbWF0ZS5jc3M%2FdD02Mzg5MjI4OTI4NzQ4MTQzNDBkAgoPFgIfAgUgZnMtZ3JpZC5jc3M%2FdD02Mzg5MjI4OTI4NzQ4MTQzNDBkAgsPFgIfAgUgZnMtYmFzZS5jc3M%2FdD02Mzg5MjI4OTI4NzQ4MTQzNDBkAgwPFgIfAgUhZnMtdmlkZW8uY3NzP3Q9NjM4OTIyODkyODc0ODE0MzQwZAIBDxYCHgVjbGFzcwUqRmlyZXN0b3JtUGFnZV9GaXJlc3Rvcm1PcmRlckhpc3Rvcnl2NF9hc3B4FgICAQ9kFggCAw9kFgJmDxQrAAIPFgQeE2NhY2hlZFNlbGVjdGVkVmFsdWVkHgdWaXNpYmxlaGQQFhVmAgECAgIDAgQCBQIGAgcCCAIJAgoCCwIMAg0CDgIPAhACEQISAhMCFBYVFCsAAg8WBh4EVGV4dAUFQmxhY2seBVZhbHVlBQVCbGFjax4IU2VsZWN0ZWRoZGQUKwACDxYGHwYFD0JsYWNrTWV0cm9Ub3VjaB8HBQ9CbGFja01ldHJvVG91Y2gfCGhkZBQrAAIPFgYfBgUJQm9vdHN0cmFwHwcFCUJvb3RzdHJhcB8IaGRkFCsAAg8WBh8GBQdEZWZhdWx0HwcFB0RlZmF1bHQfCGdkZBQrAAIPFgYfBgUER2xvdx8HBQRHbG93HwhoZGQUKwACDxYGHwYFCE1hdGVyaWFsHwcFCE1hdGVyaWFsHwhoZGQUKwACDxYGHwYFBU1ldHJvHwcFBU1ldHJvHwhoZGQUKwACDxYGHwYFCk1ldHJvVG91Y2gfBwUKTWV0cm9Ub3VjaB8IaGRkFCsAAg8WBh8GBQpPZmZpY2UyMDA3HwcFCk9mZmljZTIwMDcfCGhkZBQrAAIPFgYfBgUPT2ZmaWNlMjAxMEJsYWNrHwcFD09mZmljZTIwMTBCbGFjax8IaGRkFCsAAg8WBh8GBQ5PZmZpY2UyMDEwQmx1ZR8HBQ5PZmZpY2UyMDEwQmx1ZR8IaGRkFCsAAg8WBh8GBRBPZmZpY2UyMDEwU2lsdmVyHwcFEE9mZmljZTIwMTBTaWx2ZXIfCGhkZBQrAAIPFgYfBgUHT3V0bG9vax8HBQdPdXRsb29rHwhoZGQUKwACDxYGHwYFBFNpbGsfBwUEU2lsax8IaGRkFCsAAg8WBh8GBQZTaW1wbGUfBwUGU2ltcGxlHwhoZGQUKwACDxYGHwYFBlN1bnNldB8HBQZTdW5zZXQfCGhkZBQrAAIPFgYfBgUHVGVsZXJpax8HBQdUZWxlcmlrHwhoZGQUKwACDxYGHwYFBVZpc3RhHwcFBVZpc3RhHwhoZGQUKwACDxYGHwYFBVdlYjIwHwcFBVdlYjIwHwhoZGQUKwACDxYGHwYFB1dlYkJsdWUfBwUHV2ViQmx1ZR8IaGRkFCsAAg8WBh8GBQhXaW5kb3dzNx8HBQhXaW5kb3dzNx8IaGRkDxYVZmZmZmZmZmZmZmZmZmZmZmZmZmZmFgEFd1RlbGVyaWsuV2ViLlVJLlJhZENvbWJvQm94SXRlbSwgVGVsZXJpay5XZWIuVUksIFZlcnNpb249MjAyNC4xLjEzMS40NSwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj0xMjFmYWU3ODE2NWJhM2Q0Fi5mDw8WBB4IQ3NzQ2xhc3MFCXJjYkhlYWRlch4EXyFTQgICZGQCAQ8PFgQfCQUJcmNiRm9vdGVyHwoCAmRkAgIPDxYGHwYFBUJsYWNrHwcFBUJsYWNrHwhoZGQCAw8PFgYfBgUPQmxhY2tNZXRyb1RvdWNoHwcFD0JsYWNrTWV0cm9Ub3VjaB8IaGRkAgQPDxYGHwYFCUJvb3RzdHJhcB8HBQlCb290c3RyYXAfCGhkZAIFDw8WBh8GBQdEZWZhdWx0HwcFB0RlZmF1bHQfCGdkZAIGDw8WBh8GBQRHbG93HwcFBEdsb3cfCGhkZAIHDw8WBh8GBQhNYXRlcmlhbB8HBQhNYXRlcmlhbB8IaGRkAggPDxYGHwYFBU1ldHJvHwcFBU1ldHJvHwhoZGQCCQ8PFgYfBgUKTWV0cm9Ub3VjaB8HBQpNZXRyb1RvdWNoHwhoZGQCCg8PFgYfBgUKT2ZmaWNlMjAwNx8HBQpPZmZpY2UyMDA3HwhoZGQCCw8PFgYfBgUPT2ZmaWNlMjAxMEJsYWNrHwcFD09mZmljZTIwMTBCbGFjax8IaGRkAgwPDxYGHwYFDk9mZmljZTIwMTBCbHVlHwcFDk9mZmljZTIwMTBCbHVlHwhoZGQCDQ8PFgYfBgUQT2ZmaWNlMjAxMFNpbHZlch8HBRBPZmZpY2UyMDEwU2lsdmVyHwhoZGQCDg8PFgYfBgUHT3V0bG9vax8HBQdPdXRsb29rHwhoZGQCDw8PFgYfBgUEU2lsax8HBQRTaWxrHwhoZGQCEA8PFgYfBgUGU2ltcGxlHwcFBlNpbXBsZR8IaGRkAhEPDxYGHwYFBlN1bnNldB8HBQZTdW5zZXQfCGhkZAISDw8WBh8GBQdUZWxlcmlrHwcFB1RlbGVyaWsfCGhkZAITDw8WBh8GBQVWaXN0YR8HBQVWaXN0YR8IaGRkAhQPDxYGHwYFBVdlYjIwHwcFBVdlYjIwHwhoZGQCFQ8PFgYfBgUHV2ViQmx1ZR8HBQdXZWJCbHVlHwhoZGQCFg8PFgYfBgUIV2luZG93czcfBwUIV2luZG93czcfCGhkZAIHDw8WCB4VRW5hYmxlRW1iZWRkZWRTY3JpcHRzZx4cRW5hYmxlRW1iZWRkZWRCYXNlU3R5bGVzaGVldGceElJlc29sdmVkUmVuZGVyTW9kZQspclRlbGVyaWsuV2ViLlVJLlJlbmRlck1vZGUsIFRlbGVyaWsuV2ViLlVJLCBWZXJzaW9uPTIwMjQuMS4xMzEuNDUsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49MTIxZmFlNzgxNjViYTNkNAEeF0VuYWJsZUFqYXhTa2luUmVuZGVyaW5naBYCHgVzdHlsZQUNZGlzcGxheTpub25lO2QCCQ8PFgIfBgUITGFuZ3VhZ2VkZAIVD2QWCgIBD2QWAmYPZBYEZg9kFgQCAQ8PFgIeCEltYWdlVXJsBRMvZnMtaW1hZ2VzL2xvZ28ucG5nZGQCAw8WAh8PBXxkaXNwbGF5Om5vbmU7IGZvbnQtc2l6ZTogMThweDtjb2xvcjogd2hpdGU7YmFja2dyb3VuZC1jb2xvcjpyZ2IoMTkyLCAxMCwgMTApO2JvcmRlci1yYWRpdXM6IDEwcHggMTBweCAwIDA7cGFkZGluZzogOHB4IDEwcHg7ZAICD2QWBAIBDw8WAh8GBUk8aDEgY2xhc3M9J3dlbGNvbWUnPldlbGNvbWUsIExlZSBBbm5lIDxzcGFuPkxldHMgR2V0IFN0YXJ0ZWQhPC9zcGFuPjwvaDE%2BZGQCAg8PFgIfBWhkZAIDD2QWAmYPZBYCAgEPFCsAAhQrAAIPFgIfBWhkZGRkAgUPFgIfBWdkAgcPFgIfBWgWBAIBDxQrAAIUKwACZGRkZAIDDxQrAAIUKwACZGRkZAIJD2QWBAIBDw8WAh8GBQ1PcmRlciBIaXN0b3J5ZGQCAw9kFigCAQ8UKwACDxYOHgVMYWJlbAUKT3JkZXIgVHlwZR8EZB8LZx8MZx8NCysEAh8OaB8GBQhQZXJzb25hbGQQFgJmAgEWAhQrAAIPFgYfBgUIUGVyc29uYWwfBwUBMR8IZ2RkFCsAAg8WBh8GBQhDdXN0b21lch8HBQEyHwhoZGQPFgJmZhYBBXdUZWxlcmlrLldlYi5VSS5SYWRDb21ib0JveEl0ZW0sIFRlbGVyaWsuV2ViLlVJLCBWZXJzaW9uPTIwMjQuMS4xMzEuNDUsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49MTIxZmFlNzgxNjViYTNkNBYIZg8PFgQfCQUJcmNiSGVhZGVyHwoCAmRkAgEPDxYEHwkFCXJjYkZvb3Rlch8KAgJkZAICDw8WBh8GBQhQZXJzb25hbB8HBQExHwhnZGQCAw8PFgYfBgUIQ3VzdG9tZXIfBwUBMh8IaGRkAgMPDxYKHgxTZWxlY3RlZERhdGUGAICSfuro3QgeEV9za2lwTU1WYWxpZGF0aW9uaB8LZx8MZx8NCysEAmQWBGYPFCsACA8WFB8RBQpTdGFydCBEYXRlHwYFEzIwMjUtMDktMDEtMDAtMDAtMDAeEUVuYWJsZUFyaWFTdXBwb3J0aB4NTGFiZWxDc3NDbGFzcwUHcmlMYWJlbB8OaB4EU2tpbgUFVmlzdGEfDGcfE2gfDQsrBAIfC2dkFgYeClJlc2l6ZU1vZGULKXJUZWxlcmlrLldlYi5VSS5SZXNpemVNb2RlLCBUZWxlcmlrLldlYi5VSSwgVmVyc2lvbj0yMDI0LjEuMTMxLjQ1LCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPTEyMWZhZTc4MTY1YmEzZDQAHwkFEXJpVGV4dEJveCByaUhvdmVyHwoCAhYGHxcLKwUAHwkFEXJpVGV4dEJveCByaUVycm9yHwoCAhYGHxcLKwUAHwkFE3JpVGV4dEJveCByaUZvY3VzZWQfCgICFgQfCQUTcmlUZXh0Qm94IHJpRW5hYmxlZB8KAgIWBh8XCysFAB8JBRRyaVRleHRCb3ggcmlEaXNhYmxlZB8KAgIWBh8XCysFAB8JBRFyaVRleHRCb3ggcmlFbXB0eR8KAgIWBh8XCysFAB8JBRByaVRleHRCb3ggcmlSZWFkHwoCAmQCAg8UKwANDxYIBQ1TZWxlY3RlZERhdGVzDwWPAVRlbGVyaWsuV2ViLlVJLkNhbGVuZGFyLkNvbGxlY3Rpb25zLkRhdGVUaW1lQ29sbGVjdGlvbiwgVGVsZXJpay5XZWIuVUksIFZlcnNpb249MjAyNC4xLjEzMS40NSwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj0xMjFmYWU3ODE2NWJhM2Q0FCsAAAULU3BlY2lhbERheXMPBZIBVGVsZXJpay5XZWIuVUkuQ2FsZW5kYXIuQ29sbGVjdGlvbnMuQ2FsZW5kYXJEYXlDb2xsZWN0aW9uLCBUZWxlcmlrLldlYi5VSSwgVmVyc2lvbj0yMDI0LjEuMTMxLjQ1LCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPTEyMWZhZTc4MTY1YmEzZDQUKwAABQ9SZW5kZXJJbnZpc2libGVnBRFFbmFibGVNdWx0aVNlbGVjdGgPFgwfC2cfDGcfFGgfFgUFVmlzdGEfDQsrBAIfDmhkZBYEHwkFC3JjTWFpblRhYmxlHwoCAhYEHwkFDHJjT3RoZXJNb250aB8KAgJkFgQfCQUKcmNTZWxlY3RlZB8KAgJkFgQfCQUKcmNEaXNhYmxlZB8KAgIWBB8JBQxyY091dE9mUmFuZ2UfCgICFgQfCQUJcmNXZWVrZW5kHwoCAhYEHwkFB3JjSG92ZXIfCgICFgQfCQUvUmFkQ2FsZW5kYXJNb250aFZpZXcgUmFkQ2FsZW5kYXJNb250aFZpZXdfVmlzdGEfCgICFgQfCQUJcmNWaWV3U2VsHwoCAmQCBQ8PFgofEgYAQI1MtP%2FdCB8TaB8LZx8MZx8NCysEAmQWBGYPFCsACA8WFB8RBQhFbmQgRGF0ZR8GBRMyMDI1LTA5LTMwLTAwLTAwLTAwHxRoHxUFB3JpTGFiZWwfDmgfFgUFVmlzdGEfDGcfE2gfDQsrBAIfC2dkFgYfFwsrBQAfCQURcmlUZXh0Qm94IHJpSG92ZXIfCgICFgYfFwsrBQAfCQURcmlUZXh0Qm94IHJpRXJyb3IfCgICFgYfFwsrBQAfCQUTcmlUZXh0Qm94IHJpRm9jdXNlZB8KAgIWBB8JBRNyaVRleHRCb3ggcmlFbmFibGVkHwoCAhYGHxcLKwUAHwkFFHJpVGV4dEJveCByaURpc2FibGVkHwoCAhYGHxcLKwUAHwkFEXJpVGV4dEJveCByaUVtcHR5HwoCAhYGHxcLKwUAHwkFEHJpVGV4dEJveCByaVJlYWQfCgICZAICDxQrAA0PFggFDVNlbGVjdGVkRGF0ZXMPBY8BVGVsZXJpay5XZWIuVUkuQ2FsZW5kYXIuQ29sbGVjdGlvbnMuRGF0ZVRpbWVDb2xsZWN0aW9uLCBUZWxlcmlrLldlYi5VSSwgVmVyc2lvbj0yMDI0LjEuMTMxLjQ1LCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPTEyMWZhZTc4MTY1YmEzZDQUKwAABQtTcGVjaWFsRGF5cw8FkgFUZWxlcmlrLldlYi5VSS5DYWxlbmRhci5Db2xsZWN0aW9ucy5DYWxlbmRhckRheUNvbGxlY3Rpb24sIFRlbGVyaWsuV2ViLlVJLCBWZXJzaW9uPTIwMjQuMS4xMzEuNDUsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49MTIxZmFlNzgxNjViYTNkNBQrAAAFD1JlbmRlckludmlzaWJsZWcFEUVuYWJsZU11bHRpU2VsZWN0aA8WDB8LZx8MZx8UaB8WBQVWaXN0YR8NCysEAh8OaGRkFgQfCQULcmNNYWluVGFibGUfCgICFgQfCQUMcmNPdGhlck1vbnRoHwoCAmQWBB8JBQpyY1NlbGVjdGVkHwoCAmQWBB8JBQpyY0Rpc2FibGVkHwoCAhYEHwkFDHJjT3V0T2ZSYW5nZR8KAgIWBB8JBQlyY1dlZWtlbmQfCgICFgQfCQUHcmNIb3Zlch8KAgIWBB8JBS9SYWRDYWxlbmRhck1vbnRoVmlldyBSYWRDYWxlbmRhck1vbnRoVmlld19WaXN0YR8KAgIWBB8JBQlyY1ZpZXdTZWwfCgICZAIHDzwrAAUBAA8WCh8GBQdSZWZyZXNoHw5oHwxnHw0LKwQCHwtnZGQCCQ88KwAFAQAPFgweB0VuYWJsZWRoHwYFCERvd25sb2FkHw5oHwxnHw0LKwQCHwtnZGQCCw8PFgofBgUMVG90YWwgT3JkZXJzHwtnHwxnHw0LKwQBHw5oZGQCDQ8PFgofBgUBMB8LZx8MZx8NCysEAR8OaGRkAg8PDxYKHwYFH1JldGFpbCBUb3RhbCAoQ3VzdG9tZXIgUHJpY2luZykfC2cfDGcfDQsrBAEfDmhkZAIRDw8WCh8GBWZUaGlzIGFtb3VudCBkb2VzIG5vdCBpbmNsdWRlIGFueSB2b2x1bWUgZnJvbSBvcmRlcnMgb3Igb3JkZXIgZGV0YWlscyB0aGF0IGhhdmUgYmVlbiB2b2lkZWQgb3Igb24gaG9sZC4fC2cfDGcfDQsrBAEfDmhkZAITDw8WCh8GBQUkMC4wMB8LZx8MZx8NCysEAR8OaGRkAhUPDxYKHwYFJFJldGFpbCBUb3RhbCAoQnJhbmQgUGFydG5lciBQcmljaW5nKR8LZx8MZx8NCysEAR8OaGRkAhcPDxYKHwYFZlRoaXMgYW1vdW50IGRvZXMgbm90IGluY2x1ZGUgYW55IHZvbHVtZSBmcm9tIG9yZGVycyBvciBvcmRlciBkZXRhaWxzIHRoYXQgaGF2ZSBiZWVuIHZvaWRlZCBvciBvbiBob2xkLh8LZx8MZx8NCysEAR8OaGRkAhkPDxYKHwYFBSQwLjAwHwtnHwxnHw0LKwQBHw5oZGQCGw8PFgofBgUYQ29tbWlzc2lvbmFsIFZvbHVtZSAoQ1YpHwtnHwxnHw0LKwQBHw5oZGQCHQ8PFgofBgVmVGhpcyBhbW91bnQgZG9lcyBub3QgaW5jbHVkZSBhbnkgdm9sdW1lIGZyb20gb3JkZXJzIG9yIG9yZGVyIGRldGFpbHMgdGhhdCBoYXZlIGJlZW4gdm9pZGVkIG9yIG9uIGhvbGQuHwtnHwxnHw0LKwQBHw5oZGQCHw8PFgofBgUFJDAuMDAfC2cfDGcfDQsrBAEfDmhkZAIhDw8WCh8GBQlQU1YgVG90YWwfC2cfDGcfDQsrBAEfDmhkZAIjDw8WCh8GBWZUaGlzIGFtb3VudCBkb2VzIG5vdCBpbmNsdWRlIGFueSB2b2x1bWUgZnJvbSBvcmRlcnMgb3Igb3JkZXIgZGV0YWlscyB0aGF0IGhhdmUgYmVlbiB2b2lkZWQgb3Igb24gaG9sZC4fC2cfDGcfDQsrBAEfDmhkZAIlDw8WCh8GBQUkMC4wMB8LZx8MZx8NCysEAR8OaGRkAicPFCsABg8WDB4LXyFEYXRhQm91bmRnHwtnHw5oHwxnHgtfIUl0ZW1Db3VudGYfDQsrBAJkFCsAA2RkFCsAAhYCHhFJdGVtUGxhY2VIb2xkZXJJRAU3Y3RsMDBfTWFpbkNvbnRlbnRfbHN0T3JkZXJIaXN0b3J5X09yZGVySGlzdG9yeUNvbnRhaW5lcmQUKwADDwUGXyFEU0lDZg8FC18hSXRlbUNvdW50Zg8FCF8hUENvdW50ZGQWAh4CX2NmZGQYAwUeX19Db250cm9sc1JlcXVpcmVQb3N0QmFja0tleV9fFhkFF2N0bDAwJFJhZEZvcm1EZWNvcmF0b3IxBSVjdGwwMCRNYWluQ29udGVudCRjYm9PcmRlckhpc3RvcnlUeXBlBR5jdGwwMCRNYWluQ29udGVudCRjYm9TdGFydERhdGUFJ2N0bDAwJE1haW5Db250ZW50JGNib1N0YXJ0RGF0ZSRjYWxlbmRhcgUnY3RsMDAkTWFpbkNvbnRlbnQkY2JvU3RhcnREYXRlJGNhbGVuZGFyBRxjdGwwMCRNYWluQ29udGVudCRjYm9FbmREYXRlBSVjdGwwMCRNYWluQ29udGVudCRjYm9FbmREYXRlJGNhbGVuZGFyBSVjdGwwMCRNYWluQ29udGVudCRjYm9FbmREYXRlJGNhbGVuZGFyBShjdGwwMCRNYWluQ29udGVudCRidG5PcmRlckhpc3RvcnlSZWZyZXNoBSljdGwwMCRNYWluQ29udGVudCRidG5PcmRlckhpc3RvcnlEb3dubG9hZAU0Y3RsMDAkTWFpbkNvbnRlbnQkbGJsT3JkZXJIaXN0b3J5U3RhdFRpdGxlT3JkZXJDb3VudAU0Y3RsMDAkTWFpbkNvbnRlbnQkbGJsT3JkZXJIaXN0b3J5U3RhdFZhbHVlT3JkZXJDb3VudAU1Y3RsMDAkTWFpbkNvbnRlbnQkbGJsT3JkZXJIaXN0b3J5U3RhdFRpdGxlUmV0YWlsVG90YWwFK2N0bDAwJE1haW5Db250ZW50JGxibFRvb2x0aXBTdGF0UmV0YWlsVG90YWwFNWN0bDAwJE1haW5Db250ZW50JGxibE9yZGVySGlzdG9yeVN0YXRWYWx1ZVJldGFpbFRvdGFsBThjdGwwMCRNYWluQ29udGVudCRsYmxPcmRlckhpc3RvcnlTdGF0VGl0bGVXaG9sZXNhbGVUb3RhbAUuY3RsMDAkTWFpbkNvbnRlbnQkbGJsVG9vbHRpcFN0YXRXaG9sZXNhbGVUb3RhbAU4Y3RsMDAkTWFpbkNvbnRlbnQkbGJsT3JkZXJIaXN0b3J5U3RhdFZhbHVlV2hvbGVzYWxlVG90YWwFMGN0bDAwJE1haW5Db250ZW50JGxibE9yZGVySGlzdG9yeVN0YXRUaXRsZVVwbGluZQUrY3RsMDAkTWFpbkNvbnRlbnQkbGJsVG9vbHRpcFN0YXRVcGxpbmVUb3RhbAUwY3RsMDAkTWFpbkNvbnRlbnQkbGJsT3JkZXJIaXN0b3J5U3RhdFZhbHVlVXBsaW5lBS1jdGwwMCRNYWluQ29udGVudCRsYmxPcmRlckhpc3RvcnlTdGF0VGl0bGVQU1YFKGN0bDAwJE1haW5Db250ZW50JGxibFRvb2x0aXBTdGF0UFNWVG90YWwFLWN0bDAwJE1haW5Db250ZW50JGxibE9yZGVySGlzdG9yeVN0YXRWYWx1ZVBTVgUhY3RsMDAkTWFpbkNvbnRlbnQkbHN0T3JkZXJIaXN0b3J5BSVjdGwwMCRNYWluQ29udGVudCRjYm9PcmRlckhpc3RvcnlUeXBlDxQrAAIFCFBlcnNvbmFsBQExZAURY3RsMDAkU2tpbkNob29zZXIPFCsAAmUFB0RlZmF1bHRkvZCeosH5H%2B4TQCYzDgmB1IwM4l%2Fn6veprv0aRO03qrY%3D&__VIEWSTATEGENERATOR=2CBE0447&__SCROLLPOSITIONX=0&__SCROLLPOSITIONY=200&__EVENTVALIDATION=%2FwEdAAhzFG8uMqLK05Rf9bd5%2By1t%2FtMFhCET8bj78QUjm1aMzr%2Fm40leH0R5p2hdFFldrQEkbpf2Kczwydbvw%2BedIEgcpHQZAvtR7iyrOhadpU4raJ%2BHHf%2BRU4SxdzfEqCDloQNxu7WHhwuzDBI3rXx%2FsSNyK5Q%2BXyhFw1Q5hmMIpSETz%2Bh81VTPlgN02j8cNlS9u8c%2BSeWC93cDX2wNstzqXI%2BG&ctl00_RadFormDecorator1_ClientState=&ctl00%24MainContent%24cboOrderHistoryType=Customer&ctl00_MainContent_cboOrderHistoryType_ClientState=%7B%22logEntries%22%3A%5B%5D%2C%22value%22%3A%222%22%2C%22text%22%3A%22Customer%22%2C%22enabled%22%3Atrue%2C%22checkedIndices%22%3A%5B%5D%2C%22checkedItemsTextOverflows%22%3Afalse%7D&ctl00%24MainContent%24cboStartDate=2025-08-01&ctl00%24MainContent%24cboStartDate%24dateInput=8%2F1%2F2025&ctl00_MainContent_cboStartDate_calendar_SD=%5B%5B2025%2C8%2C1%5D%5D&ctl00_MainContent_cboStartDate_calendar_AD=%5B%5B1980%2C1%2C1%5D%2C%5B2099%2C12%2C30%5D%2C%5B2025%2C8%2C1%5D%5D&ctl00_MainContent_cboStartDate_dateInput_ClientState=%7B%22enabled%22%3Atrue%2C%22emptyMessage%22%3A%22%22%2C%22validationText%22%3A%222025-08-01-00-00-00%22%2C%22valueAsString%22%3A%222025-08-01-00-00-00%22%2C%22minDateStr%22%3A%221980-01-01-00-00-00%22%2C%22maxDateStr%22%3A%222099-12-31-00-00-00%22%2C%22lastSetTextBoxValue%22%3A%228%2F1%2F2025%22%7D&ctl00_MainContent_cboStartDate_ClientState=&ctl00%24MainContent%24cboEndDate=2025-09-30&ctl00%24MainContent%24cboEndDate%24dateInput=9%2F30%2F2025&ctl00_MainContent_cboEndDate_calendar_SD=%5B%5D&ctl00_MainContent_cboEndDate_calendar_AD=%5B%5B1980%2C1%2C1%5D%2C%5B2099%2C12%2C30%5D%2C%5B2025%2C9%2C1%5D%5D&ctl00_MainContent_cboEndDate_dateInput_ClientState=%7B%22enabled%22%3Atrue%2C%22emptyMessage%22%3A%22%22%2C%22validationText%22%3A%222025-09-30-00-00-00%22%2C%22valueAsString%22%3A%222025-09-30-00-00-00%22%2C%22minDateStr%22%3A%221980-01-01-00-00-00%22%2C%22maxDateStr%22%3A%222099-12-31-00-00-00%22%2C%22lastSetTextBoxValue%22%3A%229%2F30%2F2025%22%7D&ctl00_MainContent_cboEndDate_ClientState=&ctl00%24MainContent%24btnOrderHistoryRefresh=Refresh&ctl00_MainContent_btnOrderHistoryRefresh_ClientState=%7B%22text%22%3A%22Refresh%22%2C%22value%22%3A%22%22%2C%22checked%22%3Afalse%2C%22target%22%3A%22%22%2C%22navigateUrl%22%3A%22%22%2C%22commandName%22%3A%22%22%2C%22commandArgument%22%3A%22%22%2C%22autoPostBack%22%3Atrue%2C%22selectedToggleStateIndex%22%3A0%2C%22validationGroup%22%3Anull%2C%22readOnly%22%3Afalse%2C%22primary%22%3Afalse%2C%22enabled%22%3Atrue%7D&ctl00_MainContent_btnOrderHistoryDownload_ClientState=%7B%22text%22%3A%22Download%22%2C%22value%22%3A%22%22%2C%22checked%22%3Afalse%2C%22target%22%3A%22%22%2C%22navigateUrl%22%3A%22%22%2C%22commandName%22%3A%22%22%2C%22commandArgument%22%3A%22%22%2C%22autoPostBack%22%3Afalse%2C%22selectedToggleStateIndex%22%3A0%2C%22validationGroup%22%3Anull%2C%22readOnly%22%3Afalse%2C%22primary%22%3Afalse%2C%22enabled%22%3Afalse%7D&ctl00_MainContent_lstOrderHistory_ClientState="""  # your long string

    payload = dict(parse_qsl(query))
    payload.update({
        "__VIEWSTATE": viewstate,
        "__VIEWSTATEGENERATOR": viewstate_gen,
        "__EVENTVALIDATION": event_validation
    })
    headers = {
        "Content-Type": "application/x-www-form-urlencoded",
        "Origin": "https://partner.elliemd.com",
        "Referer": ORDER_HISTORY_URL,
        "User-Agent": "Mozilla/5.0",
    }

    r = await session.post(ORDER_HISTORY_URL, data=payload, headers=headers)

    if r.status_code != 200:
        return {"status": "Failed to fetch listing"}
    else:
        res = Selector(text=r.text)
        rows = res.xpath("//div[@class='fsOrderHistoryList']//div[contains(@class,'fsOrderRow')]")
        print(f"Total rows found: {len(rows)}")
        for row in rows:
            customer = row.xpath("./*[contains(@class,'fsOrderShipRecipient')]/span[contains(@id,'OrderStatValueShippingRecipient')]/text()").get('')
            if customer_name in customer:
                print(f"Found matching customer: {customer}")
                order_id = row.xpath("./*[contains(@class,'fsOrderNumber ')]//span/@orderid").get('')
                url = f"https://partner.elliemd.com/MemberToolsDotNet/Reports/FirestormOrderReceipt.aspx?OrderID={order_id}"
                r = await session.get(url)
                if r.status_code != 200:
                    return {"status": "Failed to fetch order details", "data": r.text}
                res = Selector(text=r.text)                
                return {
                    "status": r.status_code,
                    "order": { 
                        "order_id": order_id,
                        "order_data": res.xpath("//td[text()='Order Date:']/following-sibling::td/text()").get('').strip(),
                        "order_status": res.xpath("//td[text()='Order Status:']/following-sibling::td/text()").get('').strip()
                        },
                    "shipping_address": { 
                        "name":res.xpath("(//table[@class='SCNODShipToTable']//td[1]/text())[1]").get('').strip(),
                        "street": res.xpath("(//table[@class='SCNODShipToTable']//td[1]/text())[2]").get('').strip(),
                        "city/state/zip": res.xpath("(//table[@class='SCNODShipToTable']//td[1]/text())[3]").get('').strip(),
                        "phone": res.xpath("(//table[@class='SCNODShipToTable']//td[1]/text())[4]").get('').strip(),
                        "email": res.xpath("(//table[@class='SCNODShipToTable']//td[1]/text())[5]").get('').strip()
                        },
                    "products": [ 
                        {
                            'product#': res.xpath("//tr[@class='SCNODProductTableOddRow']/td[1]/text()").get('').strip(),
                            'description': res.xpath("//tr[@class='SCNODProductTableOddRow']/td[2]/text()").get('').strip(),
                            'quantity': res.xpath("//tr[@class='SCNODProductTableOddRow']/td[3]/text()").get('').strip(),
                            'commissionable': res.xpath("//tr[@class='SCNODProductTableOddRow']/td[4]/text()").get('').strip(),
                            'line_total': res.xpath("//tr[@class='SCNODProductTableOddRow']/td[5]/text()").get('').strip()
                        }
                        ],
                    "payment": {
                        'method': res.xpath("//*[contains(text(),'Payment Method')]/text()").get('').replace('Payment Method:', '').strip(), 
                        }
                }
        return {"status": "No matching customer found"}
    



async def fetch_leads(session: httpx.AsyncClient):
    r = await session.get("https://partner.elliemd.com/MemberToolsDotNet/Reports/FirestormPersonalCustomers.aspx")
    sel = Selector(text=r.text)
    viewstate = sel.css("#__VIEWSTATE::attr(value)").get()
    viewstate_gen = sel.css("#__VIEWSTATEGENERATOR::attr(value)").get()
    event_validation = sel.css("#__EVENTVALIDATION::attr(value)").get()
    query = """Timeout_CountryID=USA&ctl00_RadScriptManager1_TSM=%3B%3BSystem.Web.Extensions%2C%20Version%3D4.0.0.0%2C%20Culture%3Dneutral%2C%20PublicKeyToken%3D31bf3856ad364e35%3Aen-US%3Aa8328cc8-0a99-4e41-8fe3-b58afac64e45%3Aea597d4b%3Ab25378d2%3BTelerik.Web.UI%2C%20Version%3D2024.1.131.45%2C%20Culture%3Dneutral%2C%20PublicKeyToken%3D121fae78165ba3d4%3Aen-US%3A9948a144-ff46-44f4-9ae0-6f54d8eaff7b%3A16e4e7cd%3Aed16cbdc%3A4877f69a%3A33715776%3A86526ba7%3A874f8ea2%3Af7645509%3A88144a7a%3A24ee1bba%3Af46195d3%3A2003d0b8%3Ac128760b%3A1e771326%3Aaa288e2d%3A258f1c72%3Addbfcb67%3A4a0008d8%3Ab2e06756%3Af9b9258%3A92fe8ea0%3Afa31b949%3A19620875%3A490a9d4e&__EVENTTARGET=ctl00%24MainContent%24cboSortBy&__EVENTARGUMENT=%7B%22Command%22%3A%22Select%22%2C%22Index%22%3A9%7D&__VIEWSTATE=%2FwEPDwUKLTg1NjU2ODMwMw9kFgJmDw8WBB4PX19BbnRpWHNyZlRva2VuBSA0MGE1NjM2MDA5NjU0YjhlOTc5ZTJiZjVmYTIxNWEyNx4SX19BbnRpWHNyZlVzZXJOYW1lZWQWBGYPZBYKAggPFgIeBGhyZWYFH1N0eWxlcy5jc3M%2FdD02Mzg5NjA4ODMzNzMyOTE3MDJkAgkPFgIfAgUjZnMtYW5pbWF0ZS5jc3M%2FdD02Mzg5NjA4ODMzNzMyOTE3MDJkAgoPFgIfAgUgZnMtZ3JpZC5jc3M%2FdD02Mzg5NjA4ODMzNzMyOTE3MDJkAgsPFgIfAgUgZnMtYmFzZS5jc3M%2FdD02Mzg5NjA4ODMzNzMyOTE3MDJkAgwPFgIfAgUhZnMtdmlkZW8uY3NzP3Q9NjM4OTYwODgzMzczMjkxNzAyZAIBDxYCHgVjbGFzcwUtRmlyZXN0b3JtUGFnZV9GaXJlc3Rvcm1QZXJzb25hbEN1c3RvbWVyc19hc3B4FgICAQ9kFggCAw9kFgJmDxQrAAIPFgYeBFRleHQFB0RlZmF1bHQeE2NhY2hlZFNlbGVjdGVkVmFsdWVkHgdWaXNpYmxlaGQQFhVmAgECAgIDAgQCBQIGAgcCCAIJAgoCCwIMAg0CDgIPAhACEQISAhMCFBYVFCsAAg8WBh8EBQVCbGFjax4FVmFsdWUFBUJsYWNrHghTZWxlY3RlZGhkZBQrAAIPFgYfBAUPQmxhY2tNZXRyb1RvdWNoHwcFD0JsYWNrTWV0cm9Ub3VjaB8IaGRkFCsAAg8WBh8EBQlCb290c3RyYXAfBwUJQm9vdHN0cmFwHwhoZGQUKwACDxYGHwQFB0RlZmF1bHQfBwUHRGVmYXVsdB8IZ2RkFCsAAg8WBh8EBQRHbG93HwcFBEdsb3cfCGhkZBQrAAIPFgYfBAUITWF0ZXJpYWwfBwUITWF0ZXJpYWwfCGhkZBQrAAIPFgYfBAUFTWV0cm8fBwUFTWV0cm8fCGhkZBQrAAIPFgYfBAUKTWV0cm9Ub3VjaB8HBQpNZXRyb1RvdWNoHwhoZGQUKwACDxYGHwQFCk9mZmljZTIwMDcfBwUKT2ZmaWNlMjAwNx8IaGRkFCsAAg8WBh8EBQ9PZmZpY2UyMDEwQmxhY2sfBwUPT2ZmaWNlMjAxMEJsYWNrHwhoZGQUKwACDxYGHwQFDk9mZmljZTIwMTBCbHVlHwcFDk9mZmljZTIwMTBCbHVlHwhoZGQUKwACDxYGHwQFEE9mZmljZTIwMTBTaWx2ZXIfBwUQT2ZmaWNlMjAxMFNpbHZlch8IaGRkFCsAAg8WBh8EBQdPdXRsb29rHwcFB091dGxvb2sfCGhkZBQrAAIPFgYfBAUEU2lsax8HBQRTaWxrHwhoZGQUKwACDxYGHwQFBlNpbXBsZR8HBQZTaW1wbGUfCGhkZBQrAAIPFgYfBAUGU3Vuc2V0HwcFBlN1bnNldB8IaGRkFCsAAg8WBh8EBQdUZWxlcmlrHwcFB1RlbGVyaWsfCGhkZBQrAAIPFgYfBAUFVmlzdGEfBwUFVmlzdGEfCGhkZBQrAAIPFgYfBAUFV2ViMjAfBwUFV2ViMjAfCGhkZBQrAAIPFgYfBAUHV2ViQmx1ZR8HBQdXZWJCbHVlHwhoZGQUKwACDxYGHwQFCFdpbmRvd3M3HwcFCFdpbmRvd3M3HwhoZGQPFhVmZmZmZmZmZmZmZmZmZmZmZmZmZmYWAQV3VGVsZXJpay5XZWIuVUkuUmFkQ29tYm9Cb3hJdGVtLCBUZWxlcmlrLldlYi5VSSwgVmVyc2lvbj0yMDI0LjEuMTMxLjQ1LCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPTEyMWZhZTc4MTY1YmEzZDQWLmYPDxYEHghDc3NDbGFzcwUJcmNiSGVhZGVyHgRfIVNCAgJkZAIBDw8WBB8JBQlyY2JGb290ZXIfCgICZGQCAg8PFgYfBAUFQmxhY2sfBwUFQmxhY2sfCGhkZAIDDw8WBh8EBQ9CbGFja01ldHJvVG91Y2gfBwUPQmxhY2tNZXRyb1RvdWNoHwhoZGQCBA8PFgYfBAUJQm9vdHN0cmFwHwcFCUJvb3RzdHJhcB8IaGRkAgUPDxYGHwQFB0RlZmF1bHQfBwUHRGVmYXVsdB8IZ2RkAgYPDxYGHwQFBEdsb3cfBwUER2xvdx8IaGRkAgcPDxYGHwQFCE1hdGVyaWFsHwcFCE1hdGVyaWFsHwhoZGQCCA8PFgYfBAUFTWV0cm8fBwUFTWV0cm8fCGhkZAIJDw8WBh8EBQpNZXRyb1RvdWNoHwcFCk1ldHJvVG91Y2gfCGhkZAIKDw8WBh8EBQpPZmZpY2UyMDA3HwcFCk9mZmljZTIwMDcfCGhkZAILDw8WBh8EBQ9PZmZpY2UyMDEwQmxhY2sfBwUPT2ZmaWNlMjAxMEJsYWNrHwhoZGQCDA8PFgYfBAUOT2ZmaWNlMjAxMEJsdWUfBwUOT2ZmaWNlMjAxMEJsdWUfCGhkZAINDw8WBh8EBRBPZmZpY2UyMDEwU2lsdmVyHwcFEE9mZmljZTIwMTBTaWx2ZXIfCGhkZAIODw8WBh8EBQdPdXRsb29rHwcFB091dGxvb2sfCGhkZAIPDw8WBh8EBQRTaWxrHwcFBFNpbGsfCGhkZAIQDw8WBh8EBQZTaW1wbGUfBwUGU2ltcGxlHwhoZGQCEQ8PFgYfBAUGU3Vuc2V0HwcFBlN1bnNldB8IaGRkAhIPDxYGHwQFB1RlbGVyaWsfBwUHVGVsZXJpax8IaGRkAhMPDxYGHwQFBVZpc3RhHwcFBVZpc3RhHwhoZGQCFA8PFgYfBAUFV2ViMjAfBwUFV2ViMjAfCGhkZAIVDw8WBh8EBQdXZWJCbHVlHwcFB1dlYkJsdWUfCGhkZAIWDw8WBh8EBQhXaW5kb3dzNx8HBQhXaW5kb3dzNx8IaGRkAgcPDxYIHhVFbmFibGVFbWJlZGRlZFNjcmlwdHNnHhxFbmFibGVFbWJlZGRlZEJhc2VTdHlsZXNoZWV0Zx4SUmVzb2x2ZWRSZW5kZXJNb2RlCylyVGVsZXJpay5XZWIuVUkuUmVuZGVyTW9kZSwgVGVsZXJpay5XZWIuVUksIFZlcnNpb249MjAyNC4xLjEzMS40NSwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj0xMjFmYWU3ODE2NWJhM2Q0AR4XRW5hYmxlQWpheFNraW5SZW5kZXJpbmdoFgIeBXN0eWxlBQ1kaXNwbGF5Om5vbmU7ZAIJDw8WAh8EBQhMYW5ndWFnZWRkAhUPZBYKAgEPZBYCZg9kFgRmD2QWBAIBDw8WAh4ISW1hZ2VVcmwFEy9mcy1pbWFnZXMvbG9nby5wbmdkZAIDDxYCHw8FfGRpc3BsYXk6bm9uZTsgZm9udC1zaXplOiAxOHB4O2NvbG9yOiB3aGl0ZTtiYWNrZ3JvdW5kLWNvbG9yOnJnYigxOTIsIDEwLCAxMCk7Ym9yZGVyLXJhZGl1czogMTBweCAxMHB4IDAgMDtwYWRkaW5nOiA4cHggMTBweDtkAgIPZBYEAgEPDxYCHwQFSTxoMSBjbGFzcz0nd2VsY29tZSc%2BV2VsY29tZSwgTGVlIEFubmUgPHNwYW4%2BTGV0cyBHZXQgU3RhcnRlZCE8L3NwYW4%2BPC9oMT5kZAICDw8WAh8GaGRkAgMPZBYCZg9kFgICAQ8UKwACFCsAAg8WAh8GaGRkZGQCBQ8WAh8GZ2QCBw8WAh8GaBYEAgEPFCsAAhQrAAJkZGRkAgMPFCsAAhQrAAJkZGRkAgkPZBYYAgMPDxYGHwtnHwxnHw5oZGQCBQ8PFgIfBAUSUGVyc29uYWwgQ3VzdG9tZXJzZGQCBw8PFgIfBAUSUGVyc29uYWwgQ3VzdG9tZXJzZGQCCQ8PFgIfBAXAAVdlbGNvbWUgdG8geW91ciBwZXJzb25hbCBjdXN0b21lciBzdW1tYXJ5LiBVc2UgdGhpcyByZXBvcnQgdG8gdmlldyBkZXRhaWxzIGFib3V0IHlvdXIgY3VycmVudCBwZXJzb25hbCBjdXN0b21lcnMuIFBsZWFzZSBrZWVwIGluIG1pbmQgdGhhdCB0aGlzIHJlcG9ydCBkb2VzIG5vdCBpbmNsdWRlIG1lbWJlcnMsIG9ubHkgY3VzdG9tZXJzLmRkAgsPDxYGHwkFDERlZmF1bHRFcnJvch8EZR8KAgJkZAIPDw8WAh8EBQdTb3J0IGJ5ZGQCEQ8UKwACDxYOHwQFB0NvdW50cnkfBWQfC2cfDGcfDQsrBAEfDmgeDklzSXRlbVNlbGVjdGVkZ2QQFgpmAgECAgIDAgQCBQIGAgcCCAIJFgoUKwACDxYGHwQFC0N1c3RvbWVyIElEHwcFCE1lbWJlcklEHwhoZGQUKwACDxYGHwQFBFR5cGUfBwUEUmFuax8IaGRkFCsAAg8WBh8EBQZTdGF0dXMfBwUGU3RhdHVzHwhoZGQUKwACDxYGHwQFBUVtYWlsHwcFBUVtYWlsHwhoZGQUKwACDxYGHwQFBVBob25lHwcFBVBob25lHwhoZGQUKwACDxYGHwQFBE5hbWUfBwUETmFtZR8IaGRkFCsAAg8WBh8EBQRDaXR5HwcFCE1haWxDaXR5HwhoZGQUKwACDxYGHwQFBVN0YXRlHwcFCU1haWxTdGF0ZR8IaGRkFCsAAg8WBh8EBQdDb3VudHJ5HwcFC01haWxDb3VudHJ5HwhnZGQUKwACDxYGHwQFC0Vucm9sbCBEYXRlHwcFCkVucm9sbERhdGUfCGhkZA8WCmZmZmZmZmZmZmYWAQV3VGVsZXJpay5XZWIuVUkuUmFkQ29tYm9Cb3hJdGVtLCBUZWxlcmlrLldlYi5VSSwgVmVyc2lvbj0yMDI0LjEuMTMxLjQ1LCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPTEyMWZhZTc4MTY1YmEzZDQWGGYPDxYEHwkFCXJjYkhlYWRlch8KAgJkZAIBDw8WBB8JBQlyY2JGb290ZXIfCgICZGQCAg8PFgYfBAULQ3VzdG9tZXIgSUQfBwUITWVtYmVySUQfCGhkZAIDDw8WBh8EBQRUeXBlHwcFBFJhbmsfCGhkZAIEDw8WBh8EBQZTdGF0dXMfBwUGU3RhdHVzHwhoZGQCBQ8PFgYfBAUFRW1haWwfBwUFRW1haWwfCGhkZAIGDw8WBh8EBQVQaG9uZR8HBQVQaG9uZR8IaGRkAgcPDxYGHwQFBE5hbWUfBwUETmFtZR8IaGRkAggPDxYGHwQFBENpdHkfBwUITWFpbENpdHkfCGhkZAIJDw8WBh8EBQVTdGF0ZR8HBQlNYWlsU3RhdGUfCGhkZAIKDw8WBh8EBQdDb3VudHJ5HwcFC01haWxDb3VudHJ5HwhnZGQCCw8PFgYfBAULRW5yb2xsIERhdGUfBwUKRW5yb2xsRGF0ZR8IaGRkAhMPDxYCHwQFClNvcnQgb3JkZXJkZAIVDxQrAAIPFgwfBAUKRGVzY2VuZGluZx8FZB8LZx8MZx8NCysEAR8OaGQQFgJmAgEWAhQrAAIPFgYfBAUJQXNjZW5kaW5nHwcFA0FTQx8IaGRkFCsAAg8WBh8EBQpEZXNjZW5kaW5nHwcFBERFU0MfCGdkZA8WAmZmFgEFd1RlbGVyaWsuV2ViLlVJLlJhZENvbWJvQm94SXRlbSwgVGVsZXJpay5XZWIuVUksIFZlcnNpb249MjAyNC4xLjEzMS40NSwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj0xMjFmYWU3ODE2NWJhM2Q0FghmDw8WBB8JBQlyY2JIZWFkZXIfCgICZGQCAQ8PFgQfCQUJcmNiRm9vdGVyHwoCAmRkAgIPDxYGHwQFCUFzY2VuZGluZx8HBQNBU0MfCGhkZAIDDw8WBh8EBQpEZXNjZW5kaW5nHwcFBERFU0MfCGdkZAIXD2QWAgIBDxQrAAYPFg4eC18hRGF0YUJvdW5kZx8LZx8OaB8MZx4LXyFJdGVtQ291bnQCHh4KRGF0YU1lbWJlcgUITWVtYmVySUQfDQsrBAFkFCsAA2RkFCsAAhYCHhFJdGVtUGxhY2VIb2xkZXJJRAUxY3RsMDBfTWFpbkNvbnRlbnRfcmFkQ3VzdG9tZXJMaXN0X2l0ZW1QbGFjZWhvbGRlcmQUKwAGDwUIUGFnZVNpemUCHg8FC0VkaXRJbmRleGVzMvABAAEAAAD%2F%2F%2F%2F%2FAQAAAAAAAAAMAgAAAFdUZWxlcmlrLldlYi5VSSwgVmVyc2lvbj0yMDI0LjEuMTMxLjQ1LCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPTEyMWZhZTc4MTY1YmEzZDQFAQAAACtUZWxlcmlrLldlYi5VSS5SYWRMaXN0Vmlld0luZGV4ZXNDb2xsZWN0aW9uAwAAAA1MaXN0YDErX2l0ZW1zDExpc3RgMStfc2l6ZQ9MaXN0YDErX3ZlcnNpb24HAAAICAgCAAAACQMAAAAAAAAAAAAAAA8DAAAAAAAAAAgLDwUPU2VsZWN0ZWRJbmRleGVzMvABAAEAAAD%2F%2F%2F%2F%2FAQAAAAAAAAAMAgAAAFdUZWxlcmlrLldlYi5VSSwgVmVyc2lvbj0yMDI0LjEuMTMxLjQ1LCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPTEyMWZhZTc4MTY1YmEzZDQFAQAAACtUZWxlcmlrLldlYi5VSS5SYWRMaXN0Vmlld0luZGV4ZXNDb2xsZWN0aW9uAwAAAA1MaXN0YDErX2l0ZW1zDExpc3RgMStfc2l6ZQ9MaXN0YDErX3ZlcnNpb24HAAAICAgCAAAACQMAAAAAAAAAAAAAAA8DAAAAAAAAAAgLDwUGXyFEU0lDAsoMDwULXyFJdGVtQ291bnQCHg8FCF8hUENvdW50AjZkFgQeAl9jAgEeATAUKwACDwUJRmllbGROYW1lBQtNYWlsQ291bnRyeQ8FCVNvcnRPcmRlcgspfFRlbGVyaWsuV2ViLlVJLlJhZExpc3RWaWV3U29ydE9yZGVyLCBUZWxlcmlrLldlYi5VSSwgVmVyc2lvbj0yMDI0LjEuMTMxLjQ1LCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPTEyMWZhZTc4MTY1YmEzZDQCZBYCZg9kFkBmDxULC0N1c3RvbWVyIElEC0Vucm9sbCBEYXRlBE5hbWUEQ2l0eQVTdGF0ZQdDb3VudHJ5BFR5cGUGU3RhdHVzBVBob25lBUVtYWlsBEVkaXRkAgEPFgIeDlNhdmVkT2xkVmFsdWVzFwAWAmYPFQsGOTA0NTM0CjA2LzEyLzIwMjUPIEFiZHVsLCBDYW5kaWNlB0F0bGFudGECR0EDVVNBBExFQUQGQUNUSVZFCjQwNDY3MTAwNjXzAzxhIGhyZWY9ImphdmFzY3JpcHQ6IFNob3dQb3BVcFdpbmRvdygnLi4vRW1haWwvRW1haWxQb3BVcFdpbmRvdy5hc3B4P0VtYWlsU3ViamVjdExhbmd1YWdlVmFyPUxHX1BlcnNvbmFsbHlTcG9uc29yZWREZWFsZXJFbWFpbFN1YmplY3QmRW1haWxCb2R5TGFuZ3VhZ2VWYXI9TEdfUGVyc29uYWxseVNwb25zb3JlZERlYWxlckVtYWlsQm9keSZTdWJqZWN0VG9rZW5SZXBsYWNlbWVudE1ldGhvZE5hbWU9UHJvY2Vzc1BlcnNvbmFsbHlTcG9uc29yZWREZWFsZXJTdWJqZWN0VG9rZW5zJkJvZHlUb2tlblJlcGxhY2VtZW50TWV0aG9kTmFtZT1Qcm9jZXNzUGVyc29uYWxseVNwb25zb3JlZERlYWxlckJvZHlUb2tlbnMmVGVtcGxhdGVQcmVmaXg9UGVyc29uYWxseVNwb25zb3JlZERlYWxlcl8mVGFyZ2V0SUQxPTkwNDUzNCcsICdjdGwwMF9NYWluQ29udGVudF93ZHdNYWluV2luZG93JywgJycsICdyZWluYWJkdWxAaG90bWFpbC5jb20nKTsiPnJlaW5hYmR1bEBob3RtYWlsLmNvbTwvYT5wPGEgaHJlZj0iamF2YXNjcmlwdDogU2hvd0VkaXRQb3BVcFdpbmRvdygnLi9FZGl0Q3VzdG9tZXIuYXNweD9kaWQ9OTA0NTM0JywgJ3dkd0VkaXRXaW5kb3cnLCA0NzUsIDgyNSk7Ij5FZGl0PC9hPmQCAg8WAh8YFwAWAmYPFQsGODk5NzI1CjA1LzMxLzIwMjUMIFByaWNlLCBHZW5hClNlYmFzdG9wb2wCQ0EDVVNBBExFQUQGQUNUSVZFCjcwNzk1Mzg4Mjn5AzxhIGhyZWY9ImphdmFzY3JpcHQ6IFNob3dQb3BVcFdpbmRvdygnLi4vRW1haWwvRW1haWxQb3BVcFdpbmRvdy5hc3B4P0VtYWlsU3ViamVjdExhbmd1YWdlVmFyPUxHX1BlcnNvbmFsbHlTcG9uc29yZWREZWFsZXJFbWFpbFN1YmplY3QmRW1haWxCb2R5TGFuZ3VhZ2VWYXI9TEdfUGVyc29uYWxseVNwb25zb3JlZERlYWxlckVtYWlsQm9keSZTdWJqZWN0VG9rZW5SZXBsYWNlbWVudE1ldGhvZE5hbWU9UHJvY2Vzc1BlcnNvbmFsbHlTcG9uc29yZWREZWFsZXJTdWJqZWN0VG9rZW5zJkJvZHlUb2tlblJlcGxhY2VtZW50TWV0aG9kTmFtZT1Qcm9jZXNzUGVyc29uYWxseVNwb25zb3JlZERlYWxlckJvZHlUb2tlbnMmVGVtcGxhdGVQcmVmaXg9UGVyc29uYWxseVNwb25zb3JlZERlYWxlcl8mVGFyZ2V0SUQxPTg5OTcyNScsICdjdGwwMF9NYWluQ29udGVudF93ZHdNYWluV2luZG93JywgJycsICdnZW5hbWFyaWVwcmljZUBnbWFpbC5jb20nKTsiPmdlbmFtYXJpZXByaWNlQGdtYWlsLmNvbTwvYT5wPGEgaHJlZj0iamF2YXNjcmlwdDogU2hvd0VkaXRQb3BVcFdpbmRvdygnLi9FZGl0Q3VzdG9tZXIuYXNweD9kaWQ9ODk5NzI1JywgJ3dkd0VkaXRXaW5kb3cnLCA0NzUsIDgyNSk7Ij5FZGl0PC9hPmQCAw8WAh8YFwAWAmYPFQsGODQ5NDk3CjAyLzEzLzIwMjUXQSBLIEFhbG9uYS1QZWFoaSwgQ2hha2EIU3BhbmF3YXkCV0EDVVNBBExFQUQGQUNUSVZFCjI1MzgyMDQ4MTfvAzxhIGhyZWY9ImphdmFzY3JpcHQ6IFNob3dQb3BVcFdpbmRvdygnLi4vRW1haWwvRW1haWxQb3BVcFdpbmRvdy5hc3B4P0VtYWlsU3ViamVjdExhbmd1YWdlVmFyPUxHX1BlcnNvbmFsbHlTcG9uc29yZWREZWFsZXJFbWFpbFN1YmplY3QmRW1haWxCb2R5TGFuZ3VhZ2VWYXI9TEdfUGVyc29uYWxseVNwb25zb3JlZERlYWxlckVtYWlsQm9keSZTdWJqZWN0VG9rZW5SZXBsYWNlbWVudE1ldGhvZE5hbWU9UHJvY2Vzc1BlcnNvbmFsbHlTcG9uc29yZWREZWFsZXJTdWJqZWN0VG9rZW5zJkJvZHlUb2tlblJlcGxhY2VtZW50TWV0aG9kTmFtZT1Qcm9jZXNzUGVyc29uYWxseVNwb25zb3JlZERlYWxlckJvZHlUb2tlbnMmVGVtcGxhdGVQcmVmaXg9UGVyc29uYWxseVNwb25zb3JlZERlYWxlcl8mVGFyZ2V0SUQxPTg0OTQ5NycsICdjdGwwMF9NYWluQ29udGVudF93ZHdNYWluV2luZG93JywgJycsICdla29sdTAwQGhvdG1haWwuY29tJyk7Ij5la29sdTAwQGhvdG1haWwuY29tPC9hPnA8YSBocmVmPSJqYXZhc2NyaXB0OiBTaG93RWRpdFBvcFVwV2luZG93KCcuL0VkaXRDdXN0b21lci5hc3B4P2RpZD04NDk0OTcnLCAnd2R3RWRpdFdpbmRvdycsIDQ3NSwgODI1KTsiPkVkaXQ8L2E%2BZAIEDxYCHxgXABYCZg8VCwY5MDY2NDgKMDYvMTcvMjAyNQxBYmJvdHQsIFRlc3MIU3RlcmxpbmcCQUsDVVNBBExFQUQGQUNUSVZFDSg4MDEpNzkxLTI1MTL%2FAzxhIGhyZWY9ImphdmFzY3JpcHQ6IFNob3dQb3BVcFdpbmRvdygnLi4vRW1haWwvRW1haWxQb3BVcFdpbmRvdy5hc3B4P0VtYWlsU3ViamVjdExhbmd1YWdlVmFyPUxHX1BlcnNvbmFsbHlTcG9uc29yZWREZWFsZXJFbWFpbFN1YmplY3QmRW1haWxCb2R5TGFuZ3VhZ2VWYXI9TEdfUGVyc29uYWxseVNwb25zb3JlZERlYWxlckVtYWlsQm9keSZTdWJqZWN0VG9rZW5SZXBsYWNlbWVudE1ldGhvZE5hbWU9UHJvY2Vzc1BlcnNvbmFsbHlTcG9uc29yZWREZWFsZXJTdWJqZWN0VG9rZW5zJkJvZHlUb2tlblJlcGxhY2VtZW50TWV0aG9kTmFtZT1Qcm9jZXNzUGVyc29uYWxseVNwb25zb3JlZERlYWxlckJvZHlUb2tlbnMmVGVtcGxhdGVQcmVmaXg9UGVyc29uYWxseVNwb25zb3JlZERlYWxlcl8mVGFyZ2V0SUQxPTkwNjY0OCcsICdjdGwwMF9NYWluQ29udGVudF93ZHdNYWluV2luZG93JywgJycsICd0ZXNzYWJib3R0cGhvdG9AaG90bWFpbC5jb20nKTsiPnRlc3NhYmJvdHRwaG90b0Bob3RtYWlsLmNvbTwvYT5wPGEgaHJlZj0iamF2YXNjcmlwdDogU2hvd0VkaXRQb3BVcFdpbmRvdygnLi9FZGl0Q3VzdG9tZXIuYXNweD9kaWQ9OTA2NjQ4JywgJ3dkd0VkaXRXaW5kb3cnLCA0NzUsIDgyNSk7Ij5FZGl0PC9hPmQCBQ8WAh8YFwAWAmYPFQsGOTE5MDEwCjA3LzE0LzIwMjUOQWJlbG92ZSwgTGF1cmEKTG9uZyBCZWFjaAJOWQNVU0EETEVBRAZBQ1RJVkUKNTE2NDI2NzQyM%2FUDPGEgaHJlZj0iamF2YXNjcmlwdDogU2hvd1BvcFVwV2luZG93KCcuLi9FbWFpbC9FbWFpbFBvcFVwV2luZG93LmFzcHg%2FRW1haWxTdWJqZWN0TGFuZ3VhZ2VWYXI9TEdfUGVyc29uYWxseVNwb25zb3JlZERlYWxlckVtYWlsU3ViamVjdCZFbWFpbEJvZHlMYW5ndWFnZVZhcj1MR19QZXJzb25hbGx5U3BvbnNvcmVkRGVhbGVyRW1haWxCb2R5JlN1YmplY3RUb2tlblJlcGxhY2VtZW50TWV0aG9kTmFtZT1Qcm9jZXNzUGVyc29uYWxseVNwb25zb3JlZERlYWxlclN1YmplY3RUb2tlbnMmQm9keVRva2VuUmVwbGFjZW1lbnRNZXRob2ROYW1lPVByb2Nlc3NQZXJzb25hbGx5U3BvbnNvcmVkRGVhbGVyQm9keVRva2VucyZUZW1wbGF0ZVByZWZpeD1QZXJzb25hbGx5U3BvbnNvcmVkRGVhbGVyXyZUYXJnZXRJRDE9OTE5MDEwJywgJ2N0bDAwX01haW5Db250ZW50X3dkd01haW5XaW5kb3cnLCAnJywgJ2xhdXJhYWJlbG92ZUBnbWFpbC5jb20nKTsiPmxhdXJhYWJlbG92ZUBnbWFpbC5jb208L2E%2BcDxhIGhyZWY9ImphdmFzY3JpcHQ6IFNob3dFZGl0UG9wVXBXaW5kb3coJy4vRWRpdEN1c3RvbWVyLmFzcHg%2FZGlkPTkxOTAxMCcsICd3ZHdFZGl0V2luZG93JywgNDc1LCA4MjUpOyI%2BRWRpdDwvYT5kAgYPFgIfGBcAFgJmDxULBjgzNTA5MgoxMS8yMC8yMDI0EGFicmFoYW0sIEFubmV0dGUNUGFsbSBCY2ggR2RucwJGTANVU0EETEVBRAZBQ1RJVkUKNDI1OTIyNDQyMfEDPGEgaHJlZj0iamF2YXNjcmlwdDogU2hvd1BvcFVwV2luZG93KCcuLi9FbWFpbC9FbWFpbFBvcFVwV2luZG93LmFzcHg%2FRW1haWxTdWJqZWN0TGFuZ3VhZ2VWYXI9TEdfUGVyc29uYWxseVNwb25zb3JlZERlYWxlckVtYWlsU3ViamVjdCZFbWFpbEJvZHlMYW5ndWFnZVZhcj1MR19QZXJzb25hbGx5U3BvbnNvcmVkRGVhbGVyRW1haWxCb2R5JlN1YmplY3RUb2tlblJlcGxhY2VtZW50TWV0aG9kTmFtZT1Qcm9jZXNzUGVyc29uYWxseVNwb25zb3JlZERlYWxlclN1YmplY3RUb2tlbnMmQm9keVRva2VuUmVwbGFjZW1lbnRNZXRob2ROYW1lPVByb2Nlc3NQZXJzb25hbGx5U3BvbnNvcmVkRGVhbGVyQm9keVRva2VucyZUZW1wbGF0ZVByZWZpeD1QZXJzb25hbGx5U3BvbnNvcmVkRGVhbGVyXyZUYXJnZXRJRDE9ODM1MDkyJywgJ2N0bDAwX01haW5Db250ZW50X3dkd01haW5XaW5kb3cnLCAnJywgJ2FubmV0dGVhYnJAZ21haWwuY29tJyk7Ij5hbm5ldHRlYWJyQGdtYWlsLmNvbTwvYT5wPGEgaHJlZj0iamF2YXNjcmlwdDogU2hvd0VkaXRQb3BVcFdpbmRvdygnLi9FZGl0Q3VzdG9tZXIuYXNweD9kaWQ9ODM1MDkyJywgJ3dkd0VkaXRXaW5kb3cnLCA0NzUsIDgyNSk7Ij5FZGl0PC9hPmQCBw8WAh8YFwAWAmYPFQsGODYxMDg5CjAzLzAzLzIwMjUNQWJyYWhhbSwgUmFuaQhnbGVudmlldwJJTANVU0EETEVBRAZBQ1RJVkUKODQ3Nzc4NTI1NfkDPGEgaHJlZj0iamF2YXNjcmlwdDogU2hvd1BvcFVwV2luZG93KCcuLi9FbWFpbC9FbWFpbFBvcFVwV2luZG93LmFzcHg%2FRW1haWxTdWJqZWN0TGFuZ3VhZ2VWYXI9TEdfUGVyc29uYWxseVNwb25zb3JlZERlYWxlckVtYWlsU3ViamVjdCZFbWFpbEJvZHlMYW5ndWFnZVZhcj1MR19QZXJzb25hbGx5U3BvbnNvcmVkRGVhbGVyRW1haWxCb2R5JlN1YmplY3RUb2tlblJlcGxhY2VtZW50TWV0aG9kTmFtZT1Qcm9jZXNzUGVyc29uYWxseVNwb25zb3JlZERlYWxlclN1YmplY3RUb2tlbnMmQm9keVRva2VuUmVwbGFjZW1lbnRNZXRob2ROYW1lPVByb2Nlc3NQZXJzb25hbGx5U3BvbnNvcmVkRGVhbGVyQm9keVRva2VucyZUZW1wbGF0ZVByZWZpeD1QZXJzb25hbGx5U3BvbnNvcmVkRGVhbGVyXyZUYXJnZXRJRDE9ODYxMDg5JywgJ2N0bDAwX01haW5Db250ZW50X3dkd01haW5XaW5kb3cnLCAnJywgJ3JhbmkuYWJyYWhhbTI3QGdtYWlsLmNvbScpOyI%2BcmFuaS5hYnJhaGFtMjdAZ21haWwuY29tPC9hPnA8YSBocmVmPSJqYXZhc2NyaXB0OiBTaG93RWRpdFBvcFVwV2luZG93KCcuL0VkaXRDdXN0b21lci5hc3B4P2RpZD04NjEwODknLCAnd2R3RWRpdFdpbmRvdycsIDQ3NSwgODI1KTsiPkVkaXQ8L2E%2BZAIIDxYCHxgXABYCZg8VCwY5MDA0MjUKMDYvMDIvMjAyNRBBY2VteWFuLCBHbG9yaWEgCldvb2QgUmlkZ2UCTkoDVVNBBExFQUQGQUNUSVZFDysxIDIwMS01MjctNTIzOfkDPGEgaHJlZj0iamF2YXNjcmlwdDogU2hvd1BvcFVwV2luZG93KCcuLi9FbWFpbC9FbWFpbFBvcFVwV2luZG93LmFzcHg%2FRW1haWxTdWJqZWN0TGFuZ3VhZ2VWYXI9TEdfUGVyc29uYWxseVNwb25zb3JlZERlYWxlckVtYWlsU3ViamVjdCZFbWFpbEJvZHlMYW5ndWFnZVZhcj1MR19QZXJzb25hbGx5U3BvbnNvcmVkRGVhbGVyRW1haWxCb2R5JlN1YmplY3RUb2tlblJlcGxhY2VtZW50TWV0aG9kTmFtZT1Qcm9jZXNzUGVyc29uYWxseVNwb25zb3JlZERlYWxlclN1YmplY3RUb2tlbnMmQm9keVRva2VuUmVwbGFjZW1lbnRNZXRob2ROYW1lPVByb2Nlc3NQZXJzb25hbGx5U3BvbnNvcmVkRGVhbGVyQm9keVRva2VucyZUZW1wbGF0ZVByZWZpeD1QZXJzb25hbGx5U3BvbnNvcmVkRGVhbGVyXyZUYXJnZXRJRDE9OTAwNDI1JywgJ2N0bDAwX01haW5Db250ZW50X3dkd01haW5XaW5kb3cnLCAnJywgJ2dsb3JpYS5hY2VteWFuQGdtYWlsLmNvbScpOyI%2BZ2xvcmlhLmFjZW15YW5AZ21haWwuY29tPC9hPnA8YSBocmVmPSJqYXZhc2NyaXB0OiBTaG93RWRpdFBvcFVwV2luZG93KCcuL0VkaXRDdXN0b21lci5hc3B4P2RpZD05MDA0MjUnLCAnd2R3RWRpdFdpbmRvdycsIDQ3NSwgODI1KTsiPkVkaXQ8L2E%2BZAIJDxYCHxgXABYCZg8VCwY4MzQ3NjQKMTEvMTYvMjAyNA5BY2VycmEsIEFtYW5kYQdNZW5pZmVlAkNBA1VTQQRMRUFEBkFDVElWRQo5MTY4NDQ0MzMy8QM8YSBocmVmPSJqYXZhc2NyaXB0OiBTaG93UG9wVXBXaW5kb3coJy4uL0VtYWlsL0VtYWlsUG9wVXBXaW5kb3cuYXNweD9FbWFpbFN1YmplY3RMYW5ndWFnZVZhcj1MR19QZXJzb25hbGx5U3BvbnNvcmVkRGVhbGVyRW1haWxTdWJqZWN0JkVtYWlsQm9keUxhbmd1YWdlVmFyPUxHX1BlcnNvbmFsbHlTcG9uc29yZWREZWFsZXJFbWFpbEJvZHkmU3ViamVjdFRva2VuUmVwbGFjZW1lbnRNZXRob2ROYW1lPVByb2Nlc3NQZXJzb25hbGx5U3BvbnNvcmVkRGVhbGVyU3ViamVjdFRva2VucyZCb2R5VG9rZW5SZXBsYWNlbWVudE1ldGhvZE5hbWU9UHJvY2Vzc1BlcnNvbmFsbHlTcG9uc29yZWREZWFsZXJCb2R5VG9rZW5zJlRlbXBsYXRlUHJlZml4PVBlcnNvbmFsbHlTcG9uc29yZWREZWFsZXJfJlRhcmdldElEMT04MzQ3NjQnLCAnY3RsMDBfTWFpbkNvbnRlbnRfd2R3TWFpbldpbmRvdycsICcnLCAnYWRhY2VycmE4MUBnbWFpbC5jb20nKTsiPmFkYWNlcnJhODFAZ21haWwuY29tPC9hPnA8YSBocmVmPSJqYXZhc2NyaXB0OiBTaG93RWRpdFBvcFVwV2luZG93KCcuL0VkaXRDdXN0b21lci5hc3B4P2RpZD04MzQ3NjQnLCAnd2R3RWRpdFdpbmRvdycsIDQ3NSwgODI1KTsiPkVkaXQ8L2E%2BZAIKDxYCHxgXABYCZg8VCwY5MTg1NzMKMDcvMTMvMjAyNQtBZGFtcywgTGFjeQZMYXl0b24CVVQDVVNBBExFQUQGQUNUSVZFDig4MDEpIDY2OC0wNzE19QM8YSBocmVmPSJqYXZhc2NyaXB0OiBTaG93UG9wVXBXaW5kb3coJy4uL0VtYWlsL0VtYWlsUG9wVXBXaW5kb3cuYXNweD9FbWFpbFN1YmplY3RMYW5ndWFnZVZhcj1MR19QZXJzb25hbGx5U3BvbnNvcmVkRGVhbGVyRW1haWxTdWJqZWN0JkVtYWlsQm9keUxhbmd1YWdlVmFyPUxHX1BlcnNvbmFsbHlTcG9uc29yZWREZWFsZXJFbWFpbEJvZHkmU3ViamVjdFRva2VuUmVwbGFjZW1lbnRNZXRob2ROYW1lPVByb2Nlc3NQZXJzb25hbGx5U3BvbnNvcmVkRGVhbGVyU3ViamVjdFRva2VucyZCb2R5VG9rZW5SZXBsYWNlbWVudE1ldGhvZE5hbWU9UHJvY2Vzc1BlcnNvbmFsbHlTcG9uc29yZWREZWFsZXJCb2R5VG9rZW5zJlRlbXBsYXRlUHJlZml4PVBlcnNvbmFsbHlTcG9uc29yZWREZWFsZXJfJlRhcmdldElEMT05MTg1NzMnLCAnY3RsMDBfTWFpbkNvbnRlbnRfd2R3TWFpbldpbmRvdycsICcnLCAnbGFjeWFkYW1zMzgxQHlhaG9vLmNvbScpOyI%2BbGFjeWFkYW1zMzgxQHlhaG9vLmNvbTwvYT5wPGEgaHJlZj0iamF2YXNjcmlwdDogU2hvd0VkaXRQb3BVcFdpbmRvdygnLi9FZGl0Q3VzdG9tZXIuYXNweD9kaWQ9OTE4NTczJywgJ3dkd0VkaXRXaW5kb3cnLCA0NzUsIDgyNSk7Ij5FZGl0PC9hPmQCCw8WAh8YFwAWAmYPFQsGODM0MzQ1CjExLzExLzIwMjQMYWRhbXMsIHRhbW15BlNFTERFTgJOWQNVU0EETEVBRAZBQ1RJVkUOKDYzMSkgODEzLTczMjfpAzxhIGhyZWY9ImphdmFzY3JpcHQ6IFNob3dQb3BVcFdpbmRvdygnLi4vRW1haWwvRW1haWxQb3BVcFdpbmRvdy5hc3B4P0VtYWlsU3ViamVjdExhbmd1YWdlVmFyPUxHX1BlcnNvbmFsbHlTcG9uc29yZWREZWFsZXJFbWFpbFN1YmplY3QmRW1haWxCb2R5TGFuZ3VhZ2VWYXI9TEdfUGVyc29uYWxseVNwb25zb3JlZERlYWxlckVtYWlsQm9keSZTdWJqZWN0VG9rZW5SZXBsYWNlbWVudE1ldGhvZE5hbWU9UHJvY2Vzc1BlcnNvbmFsbHlTcG9uc29yZWREZWFsZXJTdWJqZWN0VG9rZW5zJkJvZHlUb2tlblJlcGxhY2VtZW50TWV0aG9kTmFtZT1Qcm9jZXNzUGVyc29uYWxseVNwb25zb3JlZERlYWxlckJvZHlUb2tlbnMmVGVtcGxhdGVQcmVmaXg9UGVyc29uYWxseVNwb25zb3JlZERlYWxlcl8mVGFyZ2V0SUQxPTgzNDM0NScsICdjdGwwMF9NYWluQ29udGVudF93ZHdNYWluV2luZG93JywgJycsICd0YW1seW4xM0Btc24uY29tJyk7Ij50YW1seW4xM0Btc24uY29tPC9hPnA8YSBocmVmPSJqYXZhc2NyaXB0OiBTaG93RWRpdFBvcFVwV2luZG93KCcuL0VkaXRDdXN0b21lci5hc3B4P2RpZD04MzQzNDUnLCAnd2R3RWRpdFdpbmRvdycsIDQ3NSwgODI1KTsiPkVkaXQ8L2E%2BZAIMDxYCHxgXABYCZg8VCwY4OTk3ODMKMDYvMDEvMjAyNQxBZGFtcywgVGFtbXkGU0VMREVOAk5ZA1VTQQhDVVNUT01FUgZBQ1RJVkUOKDYzMSkgODEzLTczMjfxAzxhIGhyZWY9ImphdmFzY3JpcHQ6IFNob3dQb3BVcFdpbmRvdygnLi4vRW1haWwvRW1haWxQb3BVcFdpbmRvdy5hc3B4P0VtYWlsU3ViamVjdExhbmd1YWdlVmFyPUxHX1BlcnNvbmFsbHlTcG9uc29yZWREZWFsZXJFbWFpbFN1YmplY3QmRW1haWxCb2R5TGFuZ3VhZ2VWYXI9TEdfUGVyc29uYWxseVNwb25zb3JlZERlYWxlckVtYWlsQm9keSZTdWJqZWN0VG9rZW5SZXBsYWNlbWVudE1ldGhvZE5hbWU9UHJvY2Vzc1BlcnNvbmFsbHlTcG9uc29yZWREZWFsZXJTdWJqZWN0VG9rZW5zJkJvZHlUb2tlblJlcGxhY2VtZW50TWV0aG9kTmFtZT1Qcm9jZXNzUGVyc29uYWxseVNwb25zb3JlZERlYWxlckJvZHlUb2tlbnMmVGVtcGxhdGVQcmVmaXg9UGVyc29uYWxseVNwb25zb3JlZERlYWxlcl8mVGFyZ2V0SUQxPTg5OTc4MycsICdjdGwwMF9NYWluQ29udGVudF93ZHdNYWluV2luZG93JywgJycsICd0YW1hZGFtczI3QHlhaG9vLmNvbScpOyI%2BdGFtYWRhbXMyN0B5YWhvby5jb208L2E%2BcDxhIGhyZWY9ImphdmFzY3JpcHQ6IFNob3dFZGl0UG9wVXBXaW5kb3coJy4vRWRpdEN1c3RvbWVyLmFzcHg%2FZGlkPTg5OTc4MycsICd3ZHdFZGl0V2luZG93JywgNDc1LCA4MjUpOyI%2BRWRpdDwvYT5kAg0PFgIfGBcAFgJmDxULBjg0MDk4MQowMS8xMi8yMDI1DEFkZGlzLCBMaW5kYQtUSE9NQVNWSUxMRQJOQwNVU0EETEVBRAZBQ1RJVkUOKDMzNikgNjg3LTUyMjTnAzxhIGhyZWY9ImphdmFzY3JpcHQ6IFNob3dQb3BVcFdpbmRvdygnLi4vRW1haWwvRW1haWxQb3BVcFdpbmRvdy5hc3B4P0VtYWlsU3ViamVjdExhbmd1YWdlVmFyPUxHX1BlcnNvbmFsbHlTcG9uc29yZWREZWFsZXJFbWFpbFN1YmplY3QmRW1haWxCb2R5TGFuZ3VhZ2VWYXI9TEdfUGVyc29uYWxseVNwb25zb3JlZERlYWxlckVtYWlsQm9keSZTdWJqZWN0VG9rZW5SZXBsYWNlbWVudE1ldGhvZE5hbWU9UHJvY2Vzc1BlcnNvbmFsbHlTcG9uc29yZWREZWFsZXJTdWJqZWN0VG9rZW5zJkJvZHlUb2tlblJlcGxhY2VtZW50TWV0aG9kTmFtZT1Qcm9jZXNzUGVyc29uYWxseVNwb25zb3JlZERlYWxlckJvZHlUb2tlbnMmVGVtcGxhdGVQcmVmaXg9UGVyc29uYWxseVNwb25zb3JlZERlYWxlcl8mVGFyZ2V0SUQxPTg0MDk4MScsICdjdGwwMF9NYWluQ29udGVudF93ZHdNYWluV2luZG93JywgJycsICd0b2tnaWdvQGFvbC5jb20nKTsiPnRva2dpZ29AYW9sLmNvbTwvYT5wPGEgaHJlZj0iamF2YXNjcmlwdDogU2hvd0VkaXRQb3BVcFdpbmRvdygnLi9FZGl0Q3VzdG9tZXIuYXNweD9kaWQ9ODQwOTgxJywgJ3dkd0VkaXRXaW5kb3cnLCA0NzUsIDgyNSk7Ij5FZGl0PC9hPmQCDg8WAh8YFwAWAmYPFQsGOTE4OTQ5CjA3LzE0LzIwMjULQWRpLCBTaGlyaW4GQXVyb3JhAkNPA1VTQQRMRUFEBkFDVElWRQ4oNzIwKSA0MzUtOTg0Ne8DPGEgaHJlZj0iamF2YXNjcmlwdDogU2hvd1BvcFVwV2luZG93KCcuLi9FbWFpbC9FbWFpbFBvcFVwV2luZG93LmFzcHg%2FRW1haWxTdWJqZWN0TGFuZ3VhZ2VWYXI9TEdfUGVyc29uYWxseVNwb25zb3JlZERlYWxlckVtYWlsU3ViamVjdCZFbWFpbEJvZHlMYW5ndWFnZVZhcj1MR19QZXJzb25hbGx5U3BvbnNvcmVkRGVhbGVyRW1haWxCb2R5JlN1YmplY3RUb2tlblJlcGxhY2VtZW50TWV0aG9kTmFtZT1Qcm9jZXNzUGVyc29uYWxseVNwb25zb3JlZERlYWxlclN1YmplY3RUb2tlbnMmQm9keVRva2VuUmVwbGFjZW1lbnRNZXRob2ROYW1lPVByb2Nlc3NQZXJzb25hbGx5U3BvbnNvcmVkRGVhbGVyQm9keVRva2VucyZUZW1wbGF0ZVByZWZpeD1QZXJzb25hbGx5U3BvbnNvcmVkRGVhbGVyXyZUYXJnZXRJRDE9OTE4OTQ5JywgJ2N0bDAwX01haW5Db250ZW50X3dkd01haW5XaW5kb3cnLCAnJywgJ3NoaW5vbWlub0B5YWhvby5jb20nKTsiPnNoaW5vbWlub0B5YWhvby5jb208L2E%2BcDxhIGhyZWY9ImphdmFzY3JpcHQ6IFNob3dFZGl0UG9wVXBXaW5kb3coJy4vRWRpdEN1c3RvbWVyLmFzcHg%2FZGlkPTkxODk0OScsICd3ZHdFZGl0V2luZG93JywgNDc1LCA4MjUpOyI%2BRWRpdDwvYT5kAg8PFgIfGBcAFgJmDxULBjgzMjk3MAoxMS8wMS8yMDI0D0FkcmVvbiwgRGVzaXJlZQpTYW4gTWFyY29zAlRYA1VTQQhDVVNUT01FUgZBQ1RJVkUKNTEyNzgxMTEwMYMEPGEgaHJlZj0iamF2YXNjcmlwdDogU2hvd1BvcFVwV2luZG93KCcuLi9FbWFpbC9FbWFpbFBvcFVwV2luZG93LmFzcHg%2FRW1haWxTdWJqZWN0TGFuZ3VhZ2VWYXI9TEdfUGVyc29uYWxseVNwb25zb3JlZERlYWxlckVtYWlsU3ViamVjdCZFbWFpbEJvZHlMYW5ndWFnZVZhcj1MR19QZXJzb25hbGx5U3BvbnNvcmVkRGVhbGVyRW1haWxCb2R5JlN1YmplY3RUb2tlblJlcGxhY2VtZW50TWV0aG9kTmFtZT1Qcm9jZXNzUGVyc29uYWxseVNwb25zb3JlZERlYWxlclN1YmplY3RUb2tlbnMmQm9keVRva2VuUmVwbGFjZW1lbnRNZXRob2ROYW1lPVByb2Nlc3NQZXJzb25hbGx5U3BvbnNvcmVkRGVhbGVyQm9keVRva2VucyZUZW1wbGF0ZVByZWZpeD1QZXJzb25hbGx5U3BvbnNvcmVkRGVhbGVyXyZUYXJnZXRJRDE9ODMyOTcwJywgJ2N0bDAwX01haW5Db250ZW50X3dkd01haW5XaW5kb3cnLCAnJywgJ2Rlc2lyZWV3YXRlcnNhZHJlb25AZ21haWwuY29tJyk7Ij5kZXNpcmVld2F0ZXJzYWRyZW9uQGdtYWlsLmNvbTwvYT5wPGEgaHJlZj0iamF2YXNjcmlwdDogU2hvd0VkaXRQb3BVcFdpbmRvdygnLi9FZGl0Q3VzdG9tZXIuYXNweD9kaWQ9ODMyOTcwJywgJ3dkd0VkaXRXaW5kb3cnLCA0NzUsIDgyNSk7Ij5FZGl0PC9hPmQCEA8WAh8YFwAWAmYPFQsGODM2MTU4CjEyLzAxLzIwMjQNQWd1bGlhbiwgTGVuYQhQQVNBREVOQQJDQQNVU0EETEVBRAZBQ1RJVkUOKDYyNikgNjYwLTU4OTDzAzxhIGhyZWY9ImphdmFzY3JpcHQ6IFNob3dQb3BVcFdpbmRvdygnLi4vRW1haWwvRW1haWxQb3BVcFdpbmRvdy5hc3B4P0VtYWlsU3ViamVjdExhbmd1YWdlVmFyPUxHX1BlcnNvbmFsbHlTcG9uc29yZWREZWFsZXJFbWFpbFN1YmplY3QmRW1haWxCb2R5TGFuZ3VhZ2VWYXI9TEdfUGVyc29uYWxseVNwb25zb3JlZERlYWxlckVtYWlsQm9keSZTdWJqZWN0VG9rZW5SZXBsYWNlbWVudE1ldGhvZE5hbWU9UHJvY2Vzc1BlcnNvbmFsbHlTcG9uc29yZWREZWFsZXJTdWJqZWN0VG9rZW5zJkJvZHlUb2tlblJlcGxhY2VtZW50TWV0aG9kTmFtZT1Qcm9jZXNzUGVyc29uYWxseVNwb25zb3JlZERlYWxlckJvZHlUb2tlbnMmVGVtcGxhdGVQcmVmaXg9UGVyc29uYWxseVNwb25zb3JlZERlYWxlcl8mVGFyZ2V0SUQxPTgzNjE1OCcsICdjdGwwMF9NYWluQ29udGVudF93ZHdNYWluV2luZG93JywgJycsICdsZW5hYWd1bGlhbkB5YWhvby5jb20nKTsiPmxlbmFhZ3VsaWFuQHlhaG9vLmNvbTwvYT5wPGEgaHJlZj0iamF2YXNjcmlwdDogU2hvd0VkaXRQb3BVcFdpbmRvdygnLi9FZGl0Q3VzdG9tZXIuYXNweD9kaWQ9ODM2MTU4JywgJ3dkd0VkaXRXaW5kb3cnLCA0NzUsIDgyNSk7Ij5FZGl0PC9hPmQCEQ8WAh8YFwAWAmYPFQsGODYyMTY2CjAzLzA0LzIwMjUNQWhsZm9ycywgQW5uYQxTYW4gQW50b25pbyACVFgDVVNBCENVU1RPTUVSBkFDVElWRQ4oMjEwKSA4ODItMDcwNfUDPGEgaHJlZj0iamF2YXNjcmlwdDogU2hvd1BvcFVwV2luZG93KCcuLi9FbWFpbC9FbWFpbFBvcFVwV2luZG93LmFzcHg%2FRW1haWxTdWJqZWN0TGFuZ3VhZ2VWYXI9TEdfUGVyc29uYWxseVNwb25zb3JlZERlYWxlckVtYWlsU3ViamVjdCZFbWFpbEJvZHlMYW5ndWFnZVZhcj1MR19QZXJzb25hbGx5U3BvbnNvcmVkRGVhbGVyRW1haWxCb2R5JlN1YmplY3RUb2tlblJlcGxhY2VtZW50TWV0aG9kTmFtZT1Qcm9jZXNzUGVyc29uYWxseVNwb25zb3JlZERlYWxlclN1YmplY3RUb2tlbnMmQm9keVRva2VuUmVwbGFjZW1lbnRNZXRob2ROYW1lPVByb2Nlc3NQZXJzb25hbGx5U3BvbnNvcmVkRGVhbGVyQm9keVRva2VucyZUZW1wbGF0ZVByZWZpeD1QZXJzb25hbGx5U3BvbnNvcmVkRGVhbGVyXyZUYXJnZXRJRDE9ODYyMTY2JywgJ2N0bDAwX01haW5Db250ZW50X3dkd01haW5XaW5kb3cnLCAnJywgJ2FubmFhYWhsZm9yc0BnbWFpbC5jb20nKTsiPmFubmFhYWhsZm9yc0BnbWFpbC5jb208L2E%2BcDxhIGhyZWY9ImphdmFzY3JpcHQ6IFNob3dFZGl0UG9wVXBXaW5kb3coJy4vRWRpdEN1c3RvbWVyLmFzcHg%2FZGlkPTg2MjE2NicsICd3ZHdFZGl0V2luZG93JywgNDc1LCA4MjUpOyI%2BRWRpdDwvYT5kAhIPFgIfGBcAFgJmDxULBjg5MTAzNgowNS8xMy8yMDI1DkFobWFkICwgUmFmZmF0EFdlc3QgQmxvb21maWVsZCACTUkDVVNBCENVU1RPTUVSBkFDVElWRQoyNDg5NDMzNDM27QM8YSBocmVmPSJqYXZhc2NyaXB0OiBTaG93UG9wVXBXaW5kb3coJy4uL0VtYWlsL0VtYWlsUG9wVXBXaW5kb3cuYXNweD9FbWFpbFN1YmplY3RMYW5ndWFnZVZhcj1MR19QZXJzb25hbGx5U3BvbnNvcmVkRGVhbGVyRW1haWxTdWJqZWN0JkVtYWlsQm9keUxhbmd1YWdlVmFyPUxHX1BlcnNvbmFsbHlTcG9uc29yZWREZWFsZXJFbWFpbEJvZHkmU3ViamVjdFRva2VuUmVwbGFjZW1lbnRNZXRob2ROYW1lPVByb2Nlc3NQZXJzb25hbGx5U3BvbnNvcmVkRGVhbGVyU3ViamVjdFRva2VucyZCb2R5VG9rZW5SZXBsYWNlbWVudE1ldGhvZE5hbWU9UHJvY2Vzc1BlcnNvbmFsbHlTcG9uc29yZWREZWFsZXJCb2R5VG9rZW5zJlRlbXBsYXRlUHJlZml4PVBlcnNvbmFsbHlTcG9uc29yZWREZWFsZXJfJlRhcmdldElEMT04OTEwMzYnLCAnY3RsMDBfTWFpbkNvbnRlbnRfd2R3TWFpbldpbmRvdycsICcnLCAncmFmZmF0ODRAeWFob28uY29tJyk7Ij5yYWZmYXQ4NEB5YWhvby5jb208L2E%2BcDxhIGhyZWY9ImphdmFzY3JpcHQ6IFNob3dFZGl0UG9wVXBXaW5kb3coJy4vRWRpdEN1c3RvbWVyLmFzcHg%2FZGlkPTg5MTAzNicsICd3ZHdFZGl0V2luZG93JywgNDc1LCA4MjUpOyI%2BRWRpdDwvYT5kAhMPFgIfGBcAFgJmDxULBjgzNjQ2MgoxMi8wMi8yMDI0DUFpa2luLCBOaWNvbGULT2xkIEhpY2tvcnkCVE4DVVNBBExFQUQGQUNUSVZFCjg0NzgwOTIxNDHvAzxhIGhyZWY9ImphdmFzY3JpcHQ6IFNob3dQb3BVcFdpbmRvdygnLi4vRW1haWwvRW1haWxQb3BVcFdpbmRvdy5hc3B4P0VtYWlsU3ViamVjdExhbmd1YWdlVmFyPUxHX1BlcnNvbmFsbHlTcG9uc29yZWREZWFsZXJFbWFpbFN1YmplY3QmRW1haWxCb2R5TGFuZ3VhZ2VWYXI9TEdfUGVyc29uYWxseVNwb25zb3JlZERlYWxlckVtYWlsQm9keSZTdWJqZWN0VG9rZW5SZXBsYWNlbWVudE1ldGhvZE5hbWU9UHJvY2Vzc1BlcnNvbmFsbHlTcG9uc29yZWREZWFsZXJTdWJqZWN0VG9rZW5zJkJvZHlUb2tlblJlcGxhY2VtZW50TWV0aG9kTmFtZT1Qcm9jZXNzUGVyc29uYWxseVNwb25zb3JlZERlYWxlckJvZHlUb2tlbnMmVGVtcGxhdGVQcmVmaXg9UGVyc29uYWxseVNwb25zb3JlZERlYWxlcl8mVGFyZ2V0SUQxPTgzNjQ2MicsICdjdGwwMF9NYWluQ29udGVudF93ZHdNYWluV2luZG93JywgJycsICduYWlraW5Adm9sc3RhdGUuZWR1Jyk7Ij5uYWlraW5Adm9sc3RhdGUuZWR1PC9hPnA8YSBocmVmPSJqYXZhc2NyaXB0OiBTaG93RWRpdFBvcFVwV2luZG93KCcuL0VkaXRDdXN0b21lci5hc3B4P2RpZD04MzY0NjInLCAnd2R3RWRpdFdpbmRvdycsIDQ3NSwgODI1KTsiPkVkaXQ8L2E%2BZAIUDxYCHxgXABYCZg8VCwY5MDQzODYKMDYvMTIvMjAyNQ1BbGJlcnQsIFJvYmluCE1ldGFpcmllAkxBA1VTQQRMRUFEBkFDVElWRQo1MDQyNTk1Njk59QM8YSBocmVmPSJqYXZhc2NyaXB0OiBTaG93UG9wVXBXaW5kb3coJy4uL0VtYWlsL0VtYWlsUG9wVXBXaW5kb3cuYXNweD9FbWFpbFN1YmplY3RMYW5ndWFnZVZhcj1MR19QZXJzb25hbGx5U3BvbnNvcmVkRGVhbGVyRW1haWxTdWJqZWN0JkVtYWlsQm9keUxhbmd1YWdlVmFyPUxHX1BlcnNvbmFsbHlTcG9uc29yZWREZWFsZXJFbWFpbEJvZHkmU3ViamVjdFRva2VuUmVwbGFjZW1lbnRNZXRob2ROYW1lPVByb2Nlc3NQZXJzb25hbGx5U3BvbnNvcmVkRGVhbGVyU3ViamVjdFRva2VucyZCb2R5VG9rZW5SZXBsYWNlbWVudE1ldGhvZE5hbWU9UHJvY2Vzc1BlcnNvbmFsbHlTcG9uc29yZWREZWFsZXJCb2R5VG9rZW5zJlRlbXBsYXRlUHJlZml4PVBlcnNvbmFsbHlTcG9uc29yZWREZWFsZXJfJlRhcmdldElEMT05MDQzODYnLCAnY3RsMDBfTWFpbkNvbnRlbnRfd2R3TWFpbldpbmRvdycsICcnLCAncm9iaW5tYWxiZXJ0QGdtYWlsLmNvbScpOyI%2Bcm9iaW5tYWxiZXJ0QGdtYWlsLmNvbTwvYT5wPGEgaHJlZj0iamF2YXNjcmlwdDogU2hvd0VkaXRQb3BVcFdpbmRvdygnLi9FZGl0Q3VzdG9tZXIuYXNweD9kaWQ9OTA0Mzg2JywgJ3dkd0VkaXRXaW5kb3cnLCA0NzUsIDgyNSk7Ij5FZGl0PC9hPmQCFQ8WAh8YFwAWAmYPFQsGODQwMDMwCjAxLzA2LzIwMjUPQWxicmFjaHQsIEp1bGllBkJvZXJuZQJUWANVU0EETEVBRAZBQ1RJVkUOKDIxMCkgMjg5LTIyMzfvAzxhIGhyZWY9ImphdmFzY3JpcHQ6IFNob3dQb3BVcFdpbmRvdygnLi4vRW1haWwvRW1haWxQb3BVcFdpbmRvdy5hc3B4P0VtYWlsU3ViamVjdExhbmd1YWdlVmFyPUxHX1BlcnNvbmFsbHlTcG9uc29yZWREZWFsZXJFbWFpbFN1YmplY3QmRW1haWxCb2R5TGFuZ3VhZ2VWYXI9TEdfUGVyc29uYWxseVNwb25zb3JlZERlYWxlckVtYWlsQm9keSZTdWJqZWN0VG9rZW5SZXBsYWNlbWVudE1ldGhvZE5hbWU9UHJvY2Vzc1BlcnNvbmFsbHlTcG9uc29yZWREZWFsZXJTdWJqZWN0VG9rZW5zJkJvZHlUb2tlblJlcGxhY2VtZW50TWV0aG9kTmFtZT1Qcm9jZXNzUGVyc29uYWxseVNwb25zb3JlZERlYWxlckJvZHlUb2tlbnMmVGVtcGxhdGVQcmVmaXg9UGVyc29uYWxseVNwb25zb3JlZERlYWxlcl8mVGFyZ2V0SUQxPTg0MDAzMCcsICdjdGwwMF9NYWluQ29udGVudF93ZHdNYWluV2luZG93JywgJycsICdhbGJyYWNodDdAZ21haWwuY29tJyk7Ij5hbGJyYWNodDdAZ21haWwuY29tPC9hPnA8YSBocmVmPSJqYXZhc2NyaXB0OiBTaG93RWRpdFBvcFVwV2luZG93KCcuL0VkaXRDdXN0b21lci5hc3B4P2RpZD04NDAwMzAnLCAnd2R3RWRpdFdpbmRvdycsIDQ3NSwgODI1KTsiPkVkaXQ8L2E%2BZAIWDxYCHxgXABYCZg8VCwY4OTMwMDgKMDUvMTgvMjAyNRJBbGJyZWNodCwgS2ltYmVybHkLQWxidXF1ZXJxdWUCTk0DVVNBBExFQUQGQUNUSVZFDig1MDUpIDM3OS00MjYy5QM8YSBocmVmPSJqYXZhc2NyaXB0OiBTaG93UG9wVXBXaW5kb3coJy4uL0VtYWlsL0VtYWlsUG9wVXBXaW5kb3cuYXNweD9FbWFpbFN1YmplY3RMYW5ndWFnZVZhcj1MR19QZXJzb25hbGx5U3BvbnNvcmVkRGVhbGVyRW1haWxTdWJqZWN0JkVtYWlsQm9keUxhbmd1YWdlVmFyPUxHX1BlcnNvbmFsbHlTcG9uc29yZWREZWFsZXJFbWFpbEJvZHkmU3ViamVjdFRva2VuUmVwbGFjZW1lbnRNZXRob2ROYW1lPVByb2Nlc3NQZXJzb25hbGx5U3BvbnNvcmVkRGVhbGVyU3ViamVjdFRva2VucyZCb2R5VG9rZW5SZXBsYWNlbWVudE1ldGhvZE5hbWU9UHJvY2Vzc1BlcnNvbmFsbHlTcG9uc29yZWREZWFsZXJCb2R5VG9rZW5zJlRlbXBsYXRlUHJlZml4PVBlcnNvbmFsbHlTcG9uc29yZWREZWFsZXJfJlRhcmdldElEMT04OTMwMDgnLCAnY3RsMDBfTWFpbkNvbnRlbnRfd2R3TWFpbldpbmRvdycsICcnLCAncXVlZW5vZjRAcS5jb20nKTsiPnF1ZWVub2Y0QHEuY29tPC9hPnA8YSBocmVmPSJqYXZhc2NyaXB0OiBTaG93RWRpdFBvcFVwV2luZG93KCcuL0VkaXRDdXN0b21lci5hc3B4P2RpZD04OTMwMDgnLCAnd2R3RWRpdFdpbmRvdycsIDQ3NSwgODI1KTsiPkVkaXQ8L2E%2BZAIXDxYCHxgXABYCZg8VCwY4NDg2OTcKMDIvMTMvMjAyNQ5BbGRyaWNoLCBSZW5lZQlGbGFnc3RhZmYCQVoDVVNBBExFQUQGQUNUSVZFCjYwMjM2OTA5NDfzAzxhIGhyZWY9ImphdmFzY3JpcHQ6IFNob3dQb3BVcFdpbmRvdygnLi4vRW1haWwvRW1haWxQb3BVcFdpbmRvdy5hc3B4P0VtYWlsU3ViamVjdExhbmd1YWdlVmFyPUxHX1BlcnNvbmFsbHlTcG9uc29yZWREZWFsZXJFbWFpbFN1YmplY3QmRW1haWxCb2R5TGFuZ3VhZ2VWYXI9TEdfUGVyc29uYWxseVNwb25zb3JlZERlYWxlckVtYWlsQm9keSZTdWJqZWN0VG9rZW5SZXBsYWNlbWVudE1ldGhvZE5hbWU9UHJvY2Vzc1BlcnNvbmFsbHlTcG9uc29yZWREZWFsZXJTdWJqZWN0VG9rZW5zJkJvZHlUb2tlblJlcGxhY2VtZW50TWV0aG9kTmFtZT1Qcm9jZXNzUGVyc29uYWxseVNwb25zb3JlZERlYWxlckJvZHlUb2tlbnMmVGVtcGxhdGVQcmVmaXg9UGVyc29uYWxseVNwb25zb3JlZERlYWxlcl8mVGFyZ2V0SUQxPTg0ODY5NycsICdjdGwwMF9NYWluQ29udGVudF93ZHdNYWluV2luZG93JywgJycsICdyZW5lZXN0cnVzdEBnbWFpbC5jb20nKTsiPnJlbmVlc3RydXN0QGdtYWlsLmNvbTwvYT5wPGEgaHJlZj0iamF2YXNjcmlwdDogU2hvd0VkaXRQb3BVcFdpbmRvdygnLi9FZGl0Q3VzdG9tZXIuYXNweD9kaWQ9ODQ4Njk3JywgJ3dkd0VkaXRXaW5kb3cnLCA0NzUsIDgyNSk7Ij5FZGl0PC9hPmQCGA8WAh8YFwAWAmYPFQsGODc2MDUxCjA0LzA2LzIwMjUYQWxleGFuZGVyLVN0cmVldCwgQXlhbm5hCE5ldyBZb3JrAk5ZA1VTQQhDVVNUT01FUgZBQ1RJVkUKNjQ2MjcxNDA5Nf0DPGEgaHJlZj0iamF2YXNjcmlwdDogU2hvd1BvcFVwV2luZG93KCcuLi9FbWFpbC9FbWFpbFBvcFVwV2luZG93LmFzcHg%2FRW1haWxTdWJqZWN0TGFuZ3VhZ2VWYXI9TEdfUGVyc29uYWxseVNwb25zb3JlZERlYWxlckVtYWlsU3ViamVjdCZFbWFpbEJvZHlMYW5ndWFnZVZhcj1MR19QZXJzb25hbGx5U3BvbnNvcmVkRGVhbGVyRW1haWxCb2R5JlN1YmplY3RUb2tlblJlcGxhY2VtZW50TWV0aG9kTmFtZT1Qcm9jZXNzUGVyc29uYWxseVNwb25zb3JlZERlYWxlclN1YmplY3RUb2tlbnMmQm9keVRva2VuUmVwbGFjZW1lbnRNZXRob2ROYW1lPVByb2Nlc3NQZXJzb25hbGx5U3BvbnNvcmVkRGVhbGVyQm9keVRva2VucyZUZW1wbGF0ZVByZWZpeD1QZXJzb25hbGx5U3BvbnNvcmVkRGVhbGVyXyZUYXJnZXRJRDE9ODc2MDUxJywgJ2N0bDAwX01haW5Db250ZW50X3dkd01haW5XaW5kb3cnLCAnJywgJ2F5YW5uYS5hbGV4YW5kZXJAZ21haWwuY29tJyk7Ij5heWFubmEuYWxleGFuZGVyQGdtYWlsLmNvbTwvYT5wPGEgaHJlZj0iamF2YXNjcmlwdDogU2hvd0VkaXRQb3BVcFdpbmRvdygnLi9FZGl0Q3VzdG9tZXIuYXNweD9kaWQ9ODc2MDUxJywgJ3dkd0VkaXRXaW5kb3cnLCA0NzUsIDgyNSk7Ij5FZGl0PC9hPmQCGQ8WAh8YFwAWAmYPFQsGODU0NzA2CjAyLzE5LzIwMjUSQWxleG9wb3Vsb3MsIE1hcmlhCUJlbGxlcm9zZQJOWQNVU0EETEVBRAZBQ1RJVkUOKDkyOSkgMzcxLTc2NzTzAzxhIGhyZWY9ImphdmFzY3JpcHQ6IFNob3dQb3BVcFdpbmRvdygnLi4vRW1haWwvRW1haWxQb3BVcFdpbmRvdy5hc3B4P0VtYWlsU3ViamVjdExhbmd1YWdlVmFyPUxHX1BlcnNvbmFsbHlTcG9uc29yZWREZWFsZXJFbWFpbFN1YmplY3QmRW1haWxCb2R5TGFuZ3VhZ2VWYXI9TEdfUGVyc29uYWxseVNwb25zb3JlZERlYWxlckVtYWlsQm9keSZTdWJqZWN0VG9rZW5SZXBsYWNlbWVudE1ldGhvZE5hbWU9UHJvY2Vzc1BlcnNvbmFsbHlTcG9uc29yZWREZWFsZXJTdWJqZWN0VG9rZW5zJkJvZHlUb2tlblJlcGxhY2VtZW50TWV0aG9kTmFtZT1Qcm9jZXNzUGVyc29uYWxseVNwb25zb3JlZERlYWxlckJvZHlUb2tlbnMmVGVtcGxhdGVQcmVmaXg9UGVyc29uYWxseVNwb25zb3JlZERlYWxlcl8mVGFyZ2V0SUQxPTg1NDcwNicsICdjdGwwMF9NYWluQ29udGVudF93ZHdNYWluV2luZG93JywgJycsICdtdmlsbGE4MjBAaG90bWFpbC5jb20nKTsiPm12aWxsYTgyMEBob3RtYWlsLmNvbTwvYT5wPGEgaHJlZj0iamF2YXNjcmlwdDogU2hvd0VkaXRQb3BVcFdpbmRvdygnLi9FZGl0Q3VzdG9tZXIuYXNweD9kaWQ9ODU0NzA2JywgJ3dkd0VkaXRXaW5kb3cnLCA0NzUsIDgyNSk7Ij5FZGl0PC9hPmQCGg8WAh8YFwAWAmYPFQsGODQwNDY4CjAxLzA5LzIwMjUPQWxqYWxhaG1hLCBSYW5hCE5ldyBZb3JrAk5ZA1VTQQRMRUFEBkFDVElWRQozNDcyNjAyMzIy8QM8YSBocmVmPSJqYXZhc2NyaXB0OiBTaG93UG9wVXBXaW5kb3coJy4uL0VtYWlsL0VtYWlsUG9wVXBXaW5kb3cuYXNweD9FbWFpbFN1YmplY3RMYW5ndWFnZVZhcj1MR19QZXJzb25hbGx5U3BvbnNvcmVkRGVhbGVyRW1haWxTdWJqZWN0JkVtYWlsQm9keUxhbmd1YWdlVmFyPUxHX1BlcnNvbmFsbHlTcG9uc29yZWREZWFsZXJFbWFpbEJvZHkmU3ViamVjdFRva2VuUmVwbGFjZW1lbnRNZXRob2ROYW1lPVByb2Nlc3NQZXJzb25hbGx5U3BvbnNvcmVkRGVhbGVyU3ViamVjdFRva2VucyZCb2R5VG9rZW5SZXBsYWNlbWVudE1ldGhvZE5hbWU9UHJvY2Vzc1BlcnNvbmFsbHlTcG9uc29yZWREZWFsZXJCb2R5VG9rZW5zJlRlbXBsYXRlUHJlZml4PVBlcnNvbmFsbHlTcG9uc29yZWREZWFsZXJfJlRhcmdldElEMT04NDA0NjgnLCAnY3RsMDBfTWFpbkNvbnRlbnRfd2R3TWFpbldpbmRvdycsICcnLCAncmFsamFsYWhtYUBnbWFpbC5jb20nKTsiPnJhbGphbGFobWFAZ21haWwuY29tPC9hPnA8YSBocmVmPSJqYXZhc2NyaXB0OiBTaG93RWRpdFBvcFVwV2luZG93KCcuL0VkaXRDdXN0b21lci5hc3B4P2RpZD04NDA0NjgnLCAnd2R3RWRpdFdpbmRvdycsIDQ3NSwgODI1KTsiPkVkaXQ8L2E%2BZAIbDxYCHxgXABYCZg8VCwY4NDA3NjkKMDEvMTAvMjAyNQ9BbGxlbiwgQWRyaWVubmUHQ2FsZ2FyeQJDQQNVU0EETEVBRAZBQ1RJVkUKNDE1MjY0NDk5OO8DPGEgaHJlZj0iamF2YXNjcmlwdDogU2hvd1BvcFVwV2luZG93KCcuLi9FbWFpbC9FbWFpbFBvcFVwV2luZG93LmFzcHg%2FRW1haWxTdWJqZWN0TGFuZ3VhZ2VWYXI9TEdfUGVyc29uYWxseVNwb25zb3JlZERlYWxlckVtYWlsU3ViamVjdCZFbWFpbEJvZHlMYW5ndWFnZVZhcj1MR19QZXJzb25hbGx5U3BvbnNvcmVkRGVhbGVyRW1haWxCb2R5JlN1YmplY3RUb2tlblJlcGxhY2VtZW50TWV0aG9kTmFtZT1Qcm9jZXNzUGVyc29uYWxseVNwb25zb3JlZERlYWxlclN1YmplY3RUb2tlbnMmQm9keVRva2VuUmVwbGFjZW1lbnRNZXRob2ROYW1lPVByb2Nlc3NQZXJzb25hbGx5U3BvbnNvcmVkRGVhbGVyQm9keVRva2VucyZUZW1wbGF0ZVByZWZpeD1QZXJzb25hbGx5U3BvbnNvcmVkRGVhbGVyXyZUYXJnZXRJRDE9ODQwNzY5JywgJ2N0bDAwX01haW5Db250ZW50X3dkd01haW5XaW5kb3cnLCAnJywgJ2FkcjFlbm5lQGljbG91ZC5jb20nKTsiPmFkcjFlbm5lQGljbG91ZC5jb208L2E%2BcDxhIGhyZWY9ImphdmFzY3JpcHQ6IFNob3dFZGl0UG9wVXBXaW5kb3coJy4vRWRpdEN1c3RvbWVyLmFzcHg%2FZGlkPTg0MDc2OScsICd3ZHdFZGl0V2luZG93JywgNDc1LCA4MjUpOyI%2BRWRpdDwvYT5kAhwPFgIfGBcAFgJmDxULBjg0MjU3OQowMS8xOS8yMDI1DUFsbGVuLCBCcmlhbmEKTG9nYW52aWxsZQJHQQNVU0EETEVBRAZBQ1RJVkUOKDQwNCkgNTE4LTEwMDDxAzxhIGhyZWY9ImphdmFzY3JpcHQ6IFNob3dQb3BVcFdpbmRvdygnLi4vRW1haWwvRW1haWxQb3BVcFdpbmRvdy5hc3B4P0VtYWlsU3ViamVjdExhbmd1YWdlVmFyPUxHX1BlcnNvbmFsbHlTcG9uc29yZWREZWFsZXJFbWFpbFN1YmplY3QmRW1haWxCb2R5TGFuZ3VhZ2VWYXI9TEdfUGVyc29uYWxseVNwb25zb3JlZERlYWxlckVtYWlsQm9keSZTdWJqZWN0VG9rZW5SZXBsYWNlbWVudE1ldGhvZE5hbWU9UHJvY2Vzc1BlcnNvbmFsbHlTcG9uc29yZWREZWFsZXJTdWJqZWN0VG9rZW5zJkJvZHlUb2tlblJlcGxhY2VtZW50TWV0aG9kTmFtZT1Qcm9jZXNzUGVyc29uYWxseVNwb25zb3JlZERlYWxlckJvZHlUb2tlbnMmVGVtcGxhdGVQcmVmaXg9UGVyc29uYWxseVNwb25zb3JlZERlYWxlcl8mVGFyZ2V0SUQxPTg0MjU3OScsICdjdGwwMF9NYWluQ29udGVudF93ZHdNYWluV2luZG93JywgJycsICdiLmFsbGVuNTIwQGdtYWlsLmNvbScpOyI%2BYi5hbGxlbjUyMEBnbWFpbC5jb208L2E%2BcDxhIGhyZWY9ImphdmFzY3JpcHQ6IFNob3dFZGl0UG9wVXBXaW5kb3coJy4vRWRpdEN1c3RvbWVyLmFzcHg%2FZGlkPTg0MjU3OScsICd3ZHdFZGl0V2luZG93JywgNDc1LCA4MjUpOyI%2BRWRpdDwvYT5kAh0PFgIfGBcAFgJmDxULBjkwMzI0NQowNi8xMC8yMDI1CkFsbGVuLCBKZW4ITmV3IEhvcGUCUEEDVVNBBExFQUQGQUNUSVZFCjkwODU4MTc3NzX1AzxhIGhyZWY9ImphdmFzY3JpcHQ6IFNob3dQb3BVcFdpbmRvdygnLi4vRW1haWwvRW1haWxQb3BVcFdpbmRvdy5hc3B4P0VtYWlsU3ViamVjdExhbmd1YWdlVmFyPUxHX1BlcnNvbmFsbHlTcG9uc29yZWREZWFsZXJFbWFpbFN1YmplY3QmRW1haWxCb2R5TGFuZ3VhZ2VWYXI9TEdfUGVyc29uYWxseVNwb25zb3JlZERlYWxlckVtYWlsQm9keSZTdWJqZWN0VG9rZW5SZXBsYWNlbWVudE1ldGhvZE5hbWU9UHJvY2Vzc1BlcnNvbmFsbHlTcG9uc29yZWREZWFsZXJTdWJqZWN0VG9rZW5zJkJvZHlUb2tlblJlcGxhY2VtZW50TWV0aG9kTmFtZT1Qcm9jZXNzUGVyc29uYWxseVNwb25zb3JlZERlYWxlckJvZHlUb2tlbnMmVGVtcGxhdGVQcmVmaXg9UGVyc29uYWxseVNwb25zb3JlZERlYWxlcl8mVGFyZ2V0SUQxPTkwMzI0NScsICdjdGwwMF9NYWluQ29udGVudF93ZHdNYWluV2luZG93JywgJycsICdqZW5hbGxlbjc3NzVAZ21haWwuY29tJyk7Ij5qZW5hbGxlbjc3NzVAZ21haWwuY29tPC9hPnA8YSBocmVmPSJqYXZhc2NyaXB0OiBTaG93RWRpdFBvcFVwV2luZG93KCcuL0VkaXRDdXN0b21lci5hc3B4P2RpZD05MDMyNDUnLCAnd2R3RWRpdFdpbmRvdycsIDQ3NSwgODI1KTsiPkVkaXQ8L2E%2BZAIeDxYCHxgXABYCZg8VCwY5MDMzMjYKMDYvMTAvMjAyNQ1BTExSRUQsIEtBUkVODFNPVVRIIEpPUkRBTgJVVANVU0EIQ1VTVE9NRVIGQUNUSVZFDig4MDEpIDg2NS0wOTQ56QM8YSBocmVmPSJqYXZhc2NyaXB0OiBTaG93UG9wVXBXaW5kb3coJy4uL0VtYWlsL0VtYWlsUG9wVXBXaW5kb3cuYXNweD9FbWFpbFN1YmplY3RMYW5ndWFnZVZhcj1MR19QZXJzb25hbGx5U3BvbnNvcmVkRGVhbGVyRW1haWxTdWJqZWN0JkVtYWlsQm9keUxhbmd1YWdlVmFyPUxHX1BlcnNvbmFsbHlTcG9uc29yZWREZWFsZXJFbWFpbEJvZHkmU3ViamVjdFRva2VuUmVwbGFjZW1lbnRNZXRob2ROYW1lPVByb2Nlc3NQZXJzb25hbGx5U3BvbnNvcmVkRGVhbGVyU3ViamVjdFRva2VucyZCb2R5VG9rZW5SZXBsYWNlbWVudE1ldGhvZE5hbWU9UHJvY2Vzc1BlcnNvbmFsbHlTcG9uc29yZWREZWFsZXJCb2R5VG9rZW5zJlRlbXBsYXRlUHJlZml4PVBlcnNvbmFsbHlTcG9uc29yZWREZWFsZXJfJlRhcmdldElEMT05MDMzMjYnLCAnY3RsMDBfTWFpbkNvbnRlbnRfd2R3TWFpbldpbmRvdycsICcnLCAna2FyZW5AdmxzdXNhLmNvbScpOyI%2Ba2FyZW5AdmxzdXNhLmNvbTwvYT5wPGEgaHJlZj0iamF2YXNjcmlwdDogU2hvd0VkaXRQb3BVcFdpbmRvdygnLi9FZGl0Q3VzdG9tZXIuYXNweD9kaWQ9OTAzMzI2JywgJ3dkd0VkaXRXaW5kb3cnLCA0NzUsIDgyNSk7Ij5FZGl0PC9hPmQCIA8UKwACDxYIHwtnHwxnHw0LKwQBHw5oZA8CAhQrAAJkZBYEZg9kFgJmDxQrAAIPFhIfEmceBFNraW4FBVZpc3RhHwxnHwcoKVtTeXN0ZW0uRGVjaW1hbCwgbXNjb3JsaWIsIFZlcnNpb249NC4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1iNzdhNWM1NjE5MzRlMDg5ATEfDmgfDQsrBAEfC2ceDFNlbGVjdGlvbkVuZCgrBgEwHg5TZWxlY3Rpb25TdGFydCgrBgEwZGRkAgEPZBYGAgEPDxYCHwQFATFkZAIDDw8WAh8EBQIzMGRkAgUPDxYCHwQFBDE2MTBkZAIZDzwrAAQBAA8WCB8LZx8OaB8MZx8NCysEAWRkAhsPPCsABAEADxYIHwtnHw5oHwxnHw0LKwQBZGQYBQUeX19Db250cm9sc1JlcXVpcmVQb3N0QmFja0tleV9fFggFF2N0bDAwJFJhZEZvcm1EZWNvcmF0b3IxBRtjdGwwMCRNYWluQ29udGVudCRjYm9Tb3J0QnkFHmN0bDAwJE1haW5Db250ZW50JGNib1NvcnRPcmRlcgUhY3RsMDAkTWFpbkNvbnRlbnQkcmFkQ3VzdG9tZXJMaXN0BS9jdGwwMCRNYWluQ29udGVudCRyYWRDdXN0b21lckxpc3QkUmFkRGF0YVBhZ2VyMQVAY3RsMDAkTWFpbkNvbnRlbnQkcmFkQ3VzdG9tZXJMaXN0JFJhZERhdGFQYWdlcjEkY3RsMDAkUGFnZVNsaWRlcgUfY3RsMDAkTWFpbkNvbnRlbnQkd2R3RWRpdFdpbmRvdwUfY3RsMDAkTWFpbkNvbnRlbnQkd2R3TWFpbldpbmRvdwUvY3RsMDAkTWFpbkNvbnRlbnQkcmFkQ3VzdG9tZXJMaXN0JFJhZERhdGFQYWdlcjEPFCsABGRmAh4CygxkBR5jdGwwMCRNYWluQ29udGVudCRjYm9Tb3J0T3JkZXIPFCsAAgUKRGVzY2VuZGluZwUEREVTQ2QFG2N0bDAwJE1haW5Db250ZW50JGNib1NvcnRCeQ8UKwACBQdDb3VudHJ5BQtNYWlsQ291bnRyeWQFEWN0bDAwJFNraW5DaG9vc2VyDxQrAAIFB0RlZmF1bHQFB0RlZmF1bHRkkPu7htl7NeURxOj9bZ2JUx12tf3jN5tZ8ahDuW3ShOI%3D&__VIEWSTATEGENERATOR=5F8B736A&__SCROLLPOSITIONX=0&__SCROLLPOSITIONY=224&__EVENTVALIDATION=%2FwEdAAPpNMzKY2PXT7%2FmM%2BlKLEpz%2FtMFhCET8bj78QUjm1aMznS2r%2BqdW%2FzbJcNk3sUGXOpyg1qcOsMm77lj7nbEAWmzGkzYbYyr7txjCb6rbw6%2F%2Fw%3D%3D&ctl00_RadFormDecorator1_ClientState=&ctl00%24MainContent%24cboSortBy=Enroll%20Date&ctl00_MainContent_cboSortBy_ClientState=%7B%22logEntries%22%3A%5B%5D%2C%22value%22%3A%22EnrollDate%22%2C%22text%22%3A%22Enroll%20Date%22%2C%22enabled%22%3Atrue%2C%22checkedIndices%22%3A%5B%5D%2C%22checkedItemsTextOverflows%22%3Afalse%7D&ctl00%24MainContent%24cboSortOrder=Descending&ctl00_MainContent_cboSortOrder_ClientState=&ctl00_MainContent_radCustomerList_RadDataPager1_ctl00_PageSlider_ClientState=%7B%22value%22%3A1%2C%22selectionStart%22%3A1%2C%22selectionEnd%22%3A0%2C%22isSelectionRangeEnabled%22%3Afalse%2C%22orientation%22%3A0%2C%22smallChange%22%3A1%2C%22largeChange%22%3A0%2C%22trackMouseWheel%22%3Atrue%2C%22showDragHandle%22%3Atrue%2C%22showDecreaseHandle%22%3Atrue%2C%22showIncreaseHandle%22%3Atrue%2C%22width%22%3A%22200px%22%2C%22height%22%3A%2222px%22%2C%22animationDuration%22%3A100%2C%22minimumValue%22%3A1%2C%22maximumValue%22%3A54%2C%22trackPosition%22%3A1%2C%22liveDrag%22%3Atrue%2C%22dragText%22%3A%22Drag%22%2C%22thumbsInteractionMode%22%3A1%7D&ctl00_MainContent_radCustomerList_RadDataPager1_ClientState=&ctl00_MainContent_radCustomerList_ClientState=&wdwEditWindow_ClientState=&ctl00_MainContent_wdwMainWindow_ClientState="""

    payload = dict(parse_qsl(query))
    payload.update({
        "__VIEWSTATE": viewstate,
        "__VIEWSTATEGENERATOR": viewstate_gen,
        "__EVENTVALIDATION": event_validation
    })
    headers = {
        'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
        'accept-language': 'en-PK,en-US;q=0.9,en;q=0.8',
        'cache-control': 'max-age=0',
        'content-type': 'application/x-www-form-urlencoded',
        'origin': 'https://partner.elliemd.com',
        'priority': 'u=0, i',
        'referer': 'https://partner.elliemd.com/MemberToolsDotNet/Reports/FirestormPersonalCustomers.aspx',
        'sec-ch-ua': '"Google Chrome";v="141", "Not?A_Brand";v="8", "Chromium";v="141"',
        'sec-ch-ua-mobile': '?0',
        'sec-ch-ua-platform': '"Windows"',
        'sec-fetch-dest': 'document',
        'sec-fetch-mode': 'navigate',
        'sec-fetch-site': 'same-origin',
        'sec-fetch-user': '?1',
        'upgrade-insecure-requests': '1',
        'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/141.0.0.0 Safari/537.36',
    }


    r = await session.post(LEADS_URL, data=payload, headers=headers)
    
    print(r.status_code)

    if r.status_code != 200:
        return {"status": "Failed to fetch listing"}
    else:
        leads = []
        res = Selector(text=r.text)
        rows = res.xpath("//*[contains(@class,'CustomerMainReportTable')]/tbody/tr")
        today = datetime.today().date()
        yesterday = today - timedelta(days=1)
        for row in rows:
            enroll_date = row.xpath("./td[2]/text()").get()
            if not enroll_date:
                continue

            enroll_date = enroll_date.strip()
            lead_type = row.xpath("./td[7]/text()").get(default="").strip() 

            try:
                date_obj = datetime.strptime(enroll_date, "%m/%d/%Y").date()
            except ValueError:
                print(f"⚠️ Invalid date format: {enroll_date}")
                continue

            if date_obj == yesterday and lead_type=="LEAD":
                lead = {
                    "customer_id": row.xpath("./td[1]/text()").get(default="").strip(),
                    "enroll_date": enroll_date,
                    "name": row.xpath("./td[3]/text()").get(default="").strip(),
                    "city": row.xpath("./td[4]/text()").get(default="").strip(),
                    "state": row.xpath("./td[5]/text()").get(default="").strip(),
                    "country": row.xpath("./td[6]/text()").get(default="").strip(),
                    "type": lead_type,
                    "status": row.xpath("./td[8]/text()").get(default="").strip(),
                    "phone": row.xpath("./td[9]/text()").get(default="").strip(),
                    "email": row.xpath("./td[10]/a/text()").get(default="").strip()
                }
                leads.append(lead)
            
        if len(leads)<1:
            return {'status':'No leads enrolled yesterday'}
        return leads
        

def get_yesterday_formatted():
    yesterday = datetime.now() - timedelta(days=1)
    year = yesterday.year
    month = yesterday.month
    day = yesterday.day
    return {
        'date_iso': yesterday.strftime('%Y-%m-%d'),
        'date_mdY': f"{month}/{day}/{year}",
        'date_full': f"{yesterday.strftime('%Y-%m-%d')}-00-00-00"
    }

async def fetch_last_listing(session: httpx.AsyncClient):
    r = await session.get(ORDER_HISTORY_URL)
    sel = Selector(text=r.text)
    viewstate = sel.css("#__VIEWSTATE::attr(value)").get()
    viewstate_gen = sel.css("#__VIEWSTATEGENERATOR::attr(value)").get()
    event_validation = sel.css("#__EVENTVALIDATION::attr(value)").get()
    from urllib.parse import parse_qsl

    query = """Timeout_CountryID=USA&ctl00_RadScriptManager1_TSM=%3B%3BSystem.Web.Extensions%2C%20Version%3D4.0.0.0%2C%20Culture%3Dneutral%2C%20PublicKeyToken%3D31bf3856ad364e35%3Aen-US%3A95047a2c-8908-49e3-b68e-d249be89f134%3Aea597d4b%3Ab25378d2%3BTelerik.Web.UI%2C%20Version%3D2024.1.131.45%2C%20Culture%3Dneutral%2C%20PublicKeyToken%3D121fae78165ba3d4%3Aen-US%3A9948a144-ff46-44f4-9ae0-6f54d8eaff7b%3A16e4e7cd%3Aed16cbdc%3A4877f69a%3A33715776%3A86526ba7%3A874f8ea2%3Af7645509%3A24ee1bba%3Af46195d3%3A2003d0b8%3Ac128760b%3A88144a7a%3A1e771326%3Aaa288e2d%3Ab092aa46%3A7c926187%3A8674cba1%3Ab7778d6c%3Ac08e9f8a%3Aa51ee93e%3A59462f1%3A6d43f6d9%3Addbfcb67&__EVENTTARGET=&__EVENTARGUMENT=&__VIEWSTATE=%2FwEPDwUKLTc0NTk4MzUwMQ9kFgJmDw8WBB4PX19BbnRpWHNyZlRva2VuBSA0MGMxMGQ0MWMyMDI0OTlhYjcxY2FhOGZiMmI1ZjNlYR4SX19BbnRpWHNyZlVzZXJOYW1lZWQWBGYPZBYKAggPFgIeBGhyZWYFH1N0eWxlcy5jc3M%2FdD02Mzg5MjI4OTI4NzQ4MTQzNDBkAgkPFgIfAgUjZnMtYW5pbWF0ZS5jc3M%2FdD02Mzg5MjI4OTI4NzQ4MTQzNDBkAgoPFgIfAgUgZnMtZ3JpZC5jc3M%2FdD02Mzg5MjI4OTI4NzQ4MTQzNDBkAgsPFgIfAgUgZnMtYmFzZS5jc3M%2FdD02Mzg5MjI4OTI4NzQ4MTQzNDBkAgwPFgIfAgUhZnMtdmlkZW8uY3NzP3Q9NjM4OTIyODkyODc0ODE0MzQwZAIBDxYCHgVjbGFzcwUqRmlyZXN0b3JtUGFnZV9GaXJlc3Rvcm1PcmRlckhpc3Rvcnl2NF9hc3B4FgICAQ9kFggCAw9kFgJmDxQrAAIPFgQeE2NhY2hlZFNlbGVjdGVkVmFsdWVkHgdWaXNpYmxlaGQQFhVmAgECAgIDAgQCBQIGAgcCCAIJAgoCCwIMAg0CDgIPAhACEQISAhMCFBYVFCsAAg8WBh4EVGV4dAUFQmxhY2seBVZhbHVlBQVCbGFjax4IU2VsZWN0ZWRoZGQUKwACDxYGHwYFD0JsYWNrTWV0cm9Ub3VjaB8HBQ9CbGFja01ldHJvVG91Y2gfCGhkZBQrAAIPFgYfBgUJQm9vdHN0cmFwHwcFCUJvb3RzdHJhcB8IaGRkFCsAAg8WBh8GBQdEZWZhdWx0HwcFB0RlZmF1bHQfCGdkZBQrAAIPFgYfBgUER2xvdx8HBQRHbG93HwhoZGQUKwACDxYGHwYFCE1hdGVyaWFsHwcFCE1hdGVyaWFsHwhoZGQUKwACDxYGHwYFBU1ldHJvHwcFBU1ldHJvHwhoZGQUKwACDxYGHwYFCk1ldHJvVG91Y2gfBwUKTWV0cm9Ub3VjaB8IaGRkFCsAAg8WBh8GBQpPZmZpY2UyMDA3HwcFCk9mZmljZTIwMDcfCGhkZBQrAAIPFgYfBgUPT2ZmaWNlMjAxMEJsYWNrHwcFD09mZmljZTIwMTBCbGFjax8IaGRkFCsAAg8WBh8GBQ5PZmZpY2UyMDEwQmx1ZR8HBQ5PZmZpY2UyMDEwQmx1ZR8IaGRkFCsAAg8WBh8GBRBPZmZpY2UyMDEwU2lsdmVyHwcFEE9mZmljZTIwMTBTaWx2ZXIfCGhkZBQrAAIPFgYfBgUHT3V0bG9vax8HBQdPdXRsb29rHwhoZGQUKwACDxYGHwYFBFNpbGsfBwUEU2lsax8IaGRkFCsAAg8WBh8GBQZTaW1wbGUfBwUGU2ltcGxlHwhoZGQUKwACDxYGHwYFBlN1bnNldB8HBQZTdW5zZXQfCGhkZBQrAAIPFgYfBgUHVGVsZXJpax8HBQdUZWxlcmlrHwhoZGQUKwACDxYGHwYFBVZpc3RhHwcFBVZpc3RhHwhoZGQUKwACDxYGHwYFBVdlYjIwHwcFBVdlYjIwHwhoZGQUKwACDxYGHwYFB1dlYkJsdWUfBwUHV2ViQmx1ZR8IaGRkFCsAAg8WBh8GBQhXaW5kb3dzNx8HBQhXaW5kb3dzNx8IaGRkDxYVZmZmZmZmZmZmZmZmZmZmZmZmZmZmFgEFd1RlbGVyaWsuV2ViLlVJLlJhZENvbWJvQm94SXRlbSwgVGVsZXJpay5XZWIuVUksIFZlcnNpb249MjAyNC4xLjEzMS40NSwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj0xMjFmYWU3ODE2NWJhM2Q0Fi5mDw8WBB4IQ3NzQ2xhc3MFCXJjYkhlYWRlch4EXyFTQgICZGQCAQ8PFgQfCQUJcmNiRm9vdGVyHwoCAmRkAgIPDxYGHwYFBUJsYWNrHwcFBUJsYWNrHwhoZGQCAw8PFgYfBgUPQmxhY2tNZXRyb1RvdWNoHwcFD0JsYWNrTWV0cm9Ub3VjaB8IaGRkAgQPDxYGHwYFCUJvb3RzdHJhcB8HBQlCb290c3RyYXAfCGhkZAIFDw8WBh8GBQdEZWZhdWx0HwcFB0RlZmF1bHQfCGdkZAIGDw8WBh8GBQRHbG93HwcFBEdsb3cfCGhkZAIHDw8WBh8GBQhNYXRlcmlhbB8HBQhNYXRlcmlhbB8IaGRkAggPDxYGHwYFBU1ldHJvHwcFBU1ldHJvHwhoZGQCCQ8PFgYfBgUKTWV0cm9Ub3VjaB8HBQpNZXRyb1RvdWNoHwhoZGQCCg8PFgYfBgUKT2ZmaWNlMjAwNx8HBQpPZmZpY2UyMDA3HwhoZGQCCw8PFgYfBgUPT2ZmaWNlMjAxMEJsYWNrHwcFD09mZmljZTIwMTBCbGFjax8IaGRkAgwPDxYGHwYFDk9mZmljZTIwMTBCbHVlHwcFDk9mZmljZTIwMTBCbHVlHwhoZGQCDQ8PFgYfBgUQT2ZmaWNlMjAxMFNpbHZlch8HBRBPZmZpY2UyMDEwU2lsdmVyHwhoZGQCDg8PFgYfBgUHT3V0bG9vax8HBQdPdXRsb29rHwhoZGQCDw8PFgYfBgUEU2lsax8HBQRTaWxrHwhoZGQCEA8PFgYfBgUGU2ltcGxlHwcFBlNpbXBsZR8IaGRkAhEPDxYGHwYFBlN1bnNldB8HBQZTdW5zZXQfCGhkZAISDw8WBh8GBQdUZWxlcmlrHwcFB1RlbGVyaWsfCGhkZAITDw8WBh8GBQVWaXN0YR8HBQVWaXN0YR8IaGRkAhQPDxYGHwYFBVdlYjIwHwcFBVdlYjIwHwhoZGQCFQ8PFgYfBgUHV2ViQmx1ZR8HBQdXZWJCbHVlHwhoZGQCFg8PFgYfBgUIV2luZG93czcfBwUIV2luZG93czcfCGhkZAIHDw8WCB4VRW5hYmxlRW1iZWRkZWRTY3JpcHRzZx4cRW5hYmxlRW1iZWRkZWRCYXNlU3R5bGVzaGVldGceElJlc29sdmVkUmVuZGVyTW9kZQspclRlbGVyaWsuV2ViLlVJLlJlbmRlck1vZGUsIFRlbGVyaWsuV2ViLlVJLCBWZXJzaW9uPTIwMjQuMS4xMzEuNDUsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49MTIxZmFlNzgxNjViYTNkNAEeF0VuYWJsZUFqYXhTa2luUmVuZGVyaW5naBYCHgVzdHlsZQUNZGlzcGxheTpub25lO2QCCQ8PFgIfBgUITGFuZ3VhZ2VkZAIVD2QWCgIBD2QWAmYPZBYEZg9kFgQCAQ8PFgIeCEltYWdlVXJsBRMvZnMtaW1hZ2VzL2xvZ28ucG5nZGQCAw8WAh8PBXxkaXNwbGF5Om5vbmU7IGZvbnQtc2l6ZTogMThweDtjb2xvcjogd2hpdGU7YmFja2dyb3VuZC1jb2xvcjpyZ2IoMTkyLCAxMCwgMTApO2JvcmRlci1yYWRpdXM6IDEwcHggMTBweCAwIDA7cGFkZGluZzogOHB4IDEwcHg7ZAICD2QWBAIBDw8WAh8GBUk8aDEgY2xhc3M9J3dlbGNvbWUnPldlbGNvbWUsIExlZSBBbm5lIDxzcGFuPkxldHMgR2V0IFN0YXJ0ZWQhPC9zcGFuPjwvaDE%2BZGQCAg8PFgIfBWhkZAIDD2QWAmYPZBYCAgEPFCsAAhQrAAIPFgIfBWhkZGRkAgUPFgIfBWdkAgcPFgIfBWgWBAIBDxQrAAIUKwACZGRkZAIDDxQrAAIUKwACZGRkZAIJD2QWBAIBDw8WAh8GBQ1PcmRlciBIaXN0b3J5ZGQCAw9kFigCAQ8UKwACDxYOHgVMYWJlbAUKT3JkZXIgVHlwZR8EZB8LZx8MZx8NCysEAh8OaB8GBQhQZXJzb25hbGQQFgJmAgEWAhQrAAIPFgYfBgUIUGVyc29uYWwfBwUBMR8IZ2RkFCsAAg8WBh8GBQhDdXN0b21lch8HBQEyHwhoZGQPFgJmZhYBBXdUZWxlcmlrLldlYi5VSS5SYWRDb21ib0JveEl0ZW0sIFRlbGVyaWsuV2ViLlVJLCBWZXJzaW9uPTIwMjQuMS4xMzEuNDUsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49MTIxZmFlNzgxNjViYTNkNBYIZg8PFgQfCQUJcmNiSGVhZGVyHwoCAmRkAgEPDxYEHwkFCXJjYkZvb3Rlch8KAgJkZAICDw8WBh8GBQhQZXJzb25hbB8HBQExHwhnZGQCAw8PFgYfBgUIQ3VzdG9tZXIfBwUBMh8IaGRkAgMPDxYKHgxTZWxlY3RlZERhdGUGAICSfuro3QgeEV9za2lwTU1WYWxpZGF0aW9uaB8LZx8MZx8NCysEAmQWBGYPFCsACA8WFB8RBQpTdGFydCBEYXRlHwYFEzIwMjUtMDktMDEtMDAtMDAtMDAeEUVuYWJsZUFyaWFTdXBwb3J0aB4NTGFiZWxDc3NDbGFzcwUHcmlMYWJlbB8OaB4EU2tpbgUFVmlzdGEfDGcfE2gfDQsrBAIfC2dkFgYeClJlc2l6ZU1vZGULKXJUZWxlcmlrLldlYi5VSS5SZXNpemVNb2RlLCBUZWxlcmlrLldlYi5VSSwgVmVyc2lvbj0yMDI0LjEuMTMxLjQ1LCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPTEyMWZhZTc4MTY1YmEzZDQAHwkFEXJpVGV4dEJveCByaUhvdmVyHwoCAhYGHxcLKwUAHwkFEXJpVGV4dEJveCByaUVycm9yHwoCAhYGHxcLKwUAHwkFE3JpVGV4dEJveCByaUZvY3VzZWQfCgICFgQfCQUTcmlUZXh0Qm94IHJpRW5hYmxlZB8KAgIWBh8XCysFAB8JBRRyaVRleHRCb3ggcmlEaXNhYmxlZB8KAgIWBh8XCysFAB8JBRFyaVRleHRCb3ggcmlFbXB0eR8KAgIWBh8XCysFAB8JBRByaVRleHRCb3ggcmlSZWFkHwoCAmQCAg8UKwANDxYIBQ1TZWxlY3RlZERhdGVzDwWPAVRlbGVyaWsuV2ViLlVJLkNhbGVuZGFyLkNvbGxlY3Rpb25zLkRhdGVUaW1lQ29sbGVjdGlvbiwgVGVsZXJpay5XZWIuVUksIFZlcnNpb249MjAyNC4xLjEzMS40NSwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj0xMjFmYWU3ODE2NWJhM2Q0FCsAAAULU3BlY2lhbERheXMPBZIBVGVsZXJpay5XZWIuVUkuQ2FsZW5kYXIuQ29sbGVjdGlvbnMuQ2FsZW5kYXJEYXlDb2xsZWN0aW9uLCBUZWxlcmlrLldlYi5VSSwgVmVyc2lvbj0yMDI0LjEuMTMxLjQ1LCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPTEyMWZhZTc4MTY1YmEzZDQUKwAABQ9SZW5kZXJJbnZpc2libGVnBRFFbmFibGVNdWx0aVNlbGVjdGgPFgwfC2cfDGcfFGgfFgUFVmlzdGEfDQsrBAIfDmhkZBYEHwkFC3JjTWFpblRhYmxlHwoCAhYEHwkFDHJjT3RoZXJNb250aB8KAgJkFgQfCQUKcmNTZWxlY3RlZB8KAgJkFgQfCQUKcmNEaXNhYmxlZB8KAgIWBB8JBQxyY091dE9mUmFuZ2UfCgICFgQfCQUJcmNXZWVrZW5kHwoCAhYEHwkFB3JjSG92ZXIfCgICFgQfCQUvUmFkQ2FsZW5kYXJNb250aFZpZXcgUmFkQ2FsZW5kYXJNb250aFZpZXdfVmlzdGEfCgICFgQfCQUJcmNWaWV3U2VsHwoCAmQCBQ8PFgofEgYAQI1MtP%2FdCB8TaB8LZx8MZx8NCysEAmQWBGYPFCsACA8WFB8RBQhFbmQgRGF0ZR8GBRMyMDI1LTA5LTMwLTAwLTAwLTAwHxRoHxUFB3JpTGFiZWwfDmgfFgUFVmlzdGEfDGcfE2gfDQsrBAIfC2dkFgYfFwsrBQAfCQURcmlUZXh0Qm94IHJpSG92ZXIfCgICFgYfFwsrBQAfCQURcmlUZXh0Qm94IHJpRXJyb3IfCgICFgYfFwsrBQAfCQUTcmlUZXh0Qm94IHJpRm9jdXNlZB8KAgIWBB8JBRNyaVRleHRCb3ggcmlFbmFibGVkHwoCAhYGHxcLKwUAHwkFFHJpVGV4dEJveCByaURpc2FibGVkHwoCAhYGHxcLKwUAHwkFEXJpVGV4dEJveCByaUVtcHR5HwoCAhYGHxcLKwUAHwkFEHJpVGV4dEJveCByaVJlYWQfCgICZAICDxQrAA0PFggFDVNlbGVjdGVkRGF0ZXMPBY8BVGVsZXJpay5XZWIuVUkuQ2FsZW5kYXIuQ29sbGVjdGlvbnMuRGF0ZVRpbWVDb2xsZWN0aW9uLCBUZWxlcmlrLldlYi5VSSwgVmVyc2lvbj0yMDI0LjEuMTMxLjQ1LCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPTEyMWZhZTc4MTY1YmEzZDQUKwAABQtTcGVjaWFsRGF5cw8FkgFUZWxlcmlrLldlYi5VSS5DYWxlbmRhci5Db2xsZWN0aW9ucy5DYWxlbmRhckRheUNvbGxlY3Rpb24sIFRlbGVyaWsuV2ViLlVJLCBWZXJzaW9uPTIwMjQuMS4xMzEuNDUsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49MTIxZmFlNzgxNjViYTNkNBQrAAAFD1JlbmRlckludmlzaWJsZWcFEUVuYWJsZU11bHRpU2VsZWN0aA8WDB8LZx8MZx8UaB8WBQVWaXN0YR8NCysEAh8OaGRkFgQfCQULcmNNYWluVGFibGUfCgICFgQfCQUMcmNPdGhlck1vbnRoHwoCAmQWBB8JBQpyY1NlbGVjdGVkHwoCAmQWBB8JBQpyY0Rpc2FibGVkHwoCAhYEHwkFDHJjT3V0T2ZSYW5nZR8KAgIWBB8JBQlyY1dlZWtlbmQfCgICFgQfCQUHcmNIb3Zlch8KAgIWBB8JBS9SYWRDYWxlbmRhck1vbnRoVmlldyBSYWRDYWxlbmRhck1vbnRoVmlld19WaXN0YR8KAgIWBB8JBQlyY1ZpZXdTZWwfCgICZAIHDzwrAAUBAA8WCh8GBQdSZWZyZXNoHw5oHwxnHw0LKwQCHwtnZGQCCQ88KwAFAQAPFgweB0VuYWJsZWRoHwYFCERvd25sb2FkHw5oHwxnHw0LKwQCHwtnZGQCCw8PFgofBgUMVG90YWwgT3JkZXJzHwtnHwxnHw0LKwQBHw5oZGQCDQ8PFgofBgUBMB8LZx8MZx8NCysEAR8OaGRkAg8PDxYKHwYFH1JldGFpbCBUb3RhbCAoQ3VzdG9tZXIgUHJpY2luZykfC2cfDGcfDQsrBAEfDmhkZAIRDw8WCh8GBWZUaGlzIGFtb3VudCBkb2VzIG5vdCBpbmNsdWRlIGFueSB2b2x1bWUgZnJvbSBvcmRlcnMgb3Igb3JkZXIgZGV0YWlscyB0aGF0IGhhdmUgYmVlbiB2b2lkZWQgb3Igb24gaG9sZC4fC2cfDGcfDQsrBAEfDmhkZAITDw8WCh8GBQUkMC4wMB8LZx8MZx8NCysEAR8OaGRkAhUPDxYKHwYFJFJldGFpbCBUb3RhbCAoQnJhbmQgUGFydG5lciBQcmljaW5nKR8LZx8MZx8NCysEAR8OaGRkAhcPDxYKHwYFZlRoaXMgYW1vdW50IGRvZXMgbm90IGluY2x1ZGUgYW55IHZvbHVtZSBmcm9tIG9yZGVycyBvciBvcmRlciBkZXRhaWxzIHRoYXQgaGF2ZSBiZWVuIHZvaWRlZCBvciBvbiBob2xkLh8LZx8MZx8NCysEAR8OaGRkAhkPDxYKHwYFBSQwLjAwHwtnHwxnHw0LKwQBHw5oZGQCGw8PFgofBgUYQ29tbWlzc2lvbmFsIFZvbHVtZSAoQ1YpHwtnHwxnHw0LKwQBHw5oZGQCHQ8PFgofBgVmVGhpcyBhbW91bnQgZG9lcyBub3QgaW5jbHVkZSBhbnkgdm9sdW1lIGZyb20gb3JkZXJzIG9yIG9yZGVyIGRldGFpbHMgdGhhdCBoYXZlIGJlZW4gdm9pZGVkIG9yIG9uIGhvbGQuHwtnHwxnHw0LKwQBHw5oZGQCHw8PFgofBgUFJDAuMDAfC2cfDGcfDQsrBAEfDmhkZAIhDw8WCh8GBQlQU1YgVG90YWwfC2cfDGcfDQsrBAEfDmhkZAIjDw8WCh8GBWZUaGlzIGFtb3VudCBkb2VzIG5vdCBpbmNsdWRlIGFueSB2b2x1bWUgZnJvbSBvcmRlcnMgb3Igb3JkZXIgZGV0YWlscyB0aGF0IGhhdmUgYmVlbiB2b2lkZWQgb3Igb24gaG9sZC4fC2cfDGcfDQsrBAEfDmhkZAIlDw8WCh8GBQUkMC4wMB8LZx8MZx8NCysEAR8OaGRkAicPFCsABg8WDB4LXyFEYXRhQm91bmRnHwtnHw5oHwxnHgtfIUl0ZW1Db3VudGYfDQsrBAJkFCsAA2RkFCsAAhYCHhFJdGVtUGxhY2VIb2xkZXJJRAU3Y3RsMDBfTWFpbkNvbnRlbnRfbHN0T3JkZXJIaXN0b3J5X09yZGVySGlzdG9yeUNvbnRhaW5lcmQUKwADDwUGXyFEU0lDZg8FC18hSXRlbUNvdW50Zg8FCF8hUENvdW50ZGQWAh4CX2NmZGQYAwUeX19Db250cm9sc1JlcXVpcmVQb3N0QmFja0tleV9fFhkFF2N0bDAwJFJhZEZvcm1EZWNvcmF0b3IxBSVjdGwwMCRNYWluQ29udGVudCRjYm9PcmRlckhpc3RvcnlUeXBlBR5jdGwwMCRNYWluQ29udGVudCRjYm9TdGFydERhdGUFJ2N0bDAwJE1haW5Db250ZW50JGNib1N0YXJ0RGF0ZSRjYWxlbmRhcgUnY3RsMDAkTWFpbkNvbnRlbnQkY2JvU3RhcnREYXRlJGNhbGVuZGFyBRxjdGwwMCRNYWluQ29udGVudCRjYm9FbmREYXRlBSVjdGwwMCRNYWluQ29udGVudCRjYm9FbmREYXRlJGNhbGVuZGFyBSVjdGwwMCRNYWluQ29udGVudCRjYm9FbmREYXRlJGNhbGVuZGFyBShjdGwwMCRNYWluQ29udGVudCRidG5PcmRlckhpc3RvcnlSZWZyZXNoBSljdGwwMCRNYWluQ29udGVudCRidG5PcmRlckhpc3RvcnlEb3dubG9hZAU0Y3RsMDAkTWFpbkNvbnRlbnQkbGJsT3JkZXJIaXN0b3J5U3RhdFRpdGxlT3JkZXJDb3VudAU0Y3RsMDAkTWFpbkNvbnRlbnQkbGJsT3JkZXJIaXN0b3J5U3RhdFZhbHVlT3JkZXJDb3VudAU1Y3RsMDAkTWFpbkNvbnRlbnQkbGJsT3JkZXJIaXN0b3J5U3RhdFRpdGxlUmV0YWlsVG90YWwFK2N0bDAwJE1haW5Db250ZW50JGxibFRvb2x0aXBTdGF0UmV0YWlsVG90YWwFNWN0bDAwJE1haW5Db250ZW50JGxibE9yZGVySGlzdG9yeVN0YXRWYWx1ZVJldGFpbFRvdGFsBThjdGwwMCRNYWluQ29udGVudCRsYmxPcmRlckhpc3RvcnlTdGF0VGl0bGVXaG9sZXNhbGVUb3RhbAUuY3RsMDAkTWFpbkNvbnRlbnQkbGJsVG9vbHRpcFN0YXRXaG9sZXNhbGVUb3RhbAU4Y3RsMDAkTWFpbkNvbnRlbnQkbGJsT3JkZXJIaXN0b3J5U3RhdFZhbHVlV2hvbGVzYWxlVG90YWwFMGN0bDAwJE1haW5Db250ZW50JGxibE9yZGVySGlzdG9yeVN0YXRUaXRsZVVwbGluZQUrY3RsMDAkTWFpbkNvbnRlbnQkbGJsVG9vbHRpcFN0YXRVcGxpbmVUb3RhbAUwY3RsMDAkTWFpbkNvbnRlbnQkbGJsT3JkZXJIaXN0b3J5U3RhdFZhbHVlVXBsaW5lBS1jdGwwMCRNYWluQ29udGVudCRsYmxPcmRlckhpc3RvcnlTdGF0VGl0bGVQU1YFKGN0bDAwJE1haW5Db250ZW50JGxibFRvb2x0aXBTdGF0UFNWVG90YWwFLWN0bDAwJE1haW5Db250ZW50JGxibE9yZGVySGlzdG9yeVN0YXRWYWx1ZVBTVgUhY3RsMDAkTWFpbkNvbnRlbnQkbHN0T3JkZXJIaXN0b3J5BSVjdGwwMCRNYWluQ29udGVudCRjYm9PcmRlckhpc3RvcnlUeXBlDxQrAAIFCFBlcnNvbmFsBQExZAURY3RsMDAkU2tpbkNob29zZXIPFCsAAmUFB0RlZmF1bHRkvZCeosH5H%2B4TQCYzDgmB1IwM4l%2Fn6veprv0aRO03qrY%3D&__VIEWSTATEGENERATOR=2CBE0447&__SCROLLPOSITIONX=0&__SCROLLPOSITIONY=200&__EVENTVALIDATION=%2FwEdAAhzFG8uMqLK05Rf9bd5%2By1t%2FtMFhCET8bj78QUjm1aMzr%2Fm40leH0R5p2hdFFldrQEkbpf2Kczwydbvw%2BedIEgcpHQZAvtR7iyrOhadpU4raJ%2BHHf%2BRU4SxdzfEqCDloQNxu7WHhwuzDBI3rXx%2FsSNyK5Q%2BXyhFw1Q5hmMIpSETz%2Bh81VTPlgN02j8cNlS9u8c%2BSeWC93cDX2wNstzqXI%2BG&ctl00_RadFormDecorator1_ClientState=&ctl00%24MainContent%24cboOrderHistoryType=Customer&ctl00_MainContent_cboOrderHistoryType_ClientState=%7B%22logEntries%22%3A%5B%5D%2C%22value%22%3A%222%22%2C%22text%22%3A%22Customer%22%2C%22enabled%22%3Atrue%2C%22checkedIndices%22%3A%5B%5D%2C%22checkedItemsTextOverflows%22%3Afalse%7D&ctl00%24MainContent%24cboStartDate=2025-08-01&ctl00%24MainContent%24cboStartDate%24dateInput=8%2F1%2F2025&ctl00_MainContent_cboStartDate_calendar_SD=%5B%5B2025%2C8%2C1%5D%5D&ctl00_MainContent_cboStartDate_calendar_AD=%5B%5B1980%2C1%2C1%5D%2C%5B2099%2C12%2C30%5D%2C%5B2025%2C8%2C1%5D%5D&ctl00_MainContent_cboStartDate_dateInput_ClientState=%7B%22enabled%22%3Atrue%2C%22emptyMessage%22%3A%22%22%2C%22validationText%22%3A%222025-08-01-00-00-00%22%2C%22valueAsString%22%3A%222025-08-01-00-00-00%22%2C%22minDateStr%22%3A%221980-01-01-00-00-00%22%2C%22maxDateStr%22%3A%222099-12-31-00-00-00%22%2C%22lastSetTextBoxValue%22%3A%228%2F1%2F2025%22%7D&ctl00_MainContent_cboStartDate_ClientState=&ctl00%24MainContent%24cboEndDate=2025-09-30&ctl00%24MainContent%24cboEndDate%24dateInput=9%2F30%2F2025&ctl00_MainContent_cboEndDate_calendar_SD=%5B%5D&ctl00_MainContent_cboEndDate_calendar_AD=%5B%5B1980%2C1%2C1%5D%2C%5B2099%2C12%2C30%5D%2C%5B2025%2C9%2C1%5D%5D&ctl00_MainContent_cboEndDate_dateInput_ClientState=%7B%22enabled%22%3Atrue%2C%22emptyMessage%22%3A%22%22%2C%22validationText%22%3A%222025-09-30-00-00-00%22%2C%22valueAsString%22%3A%222025-09-30-00-00-00%22%2C%22minDateStr%22%3A%221980-01-01-00-00-00%22%2C%22maxDateStr%22%3A%222099-12-31-00-00-00%22%2C%22lastSetTextBoxValue%22%3A%229%2F30%2F2025%22%7D&ctl00_MainContent_cboEndDate_ClientState=&ctl00%24MainContent%24btnOrderHistoryRefresh=Refresh&ctl00_MainContent_btnOrderHistoryRefresh_ClientState=%7B%22text%22%3A%22Refresh%22%2C%22value%22%3A%22%22%2C%22checked%22%3Afalse%2C%22target%22%3A%22%22%2C%22navigateUrl%22%3A%22%22%2C%22commandName%22%3A%22%22%2C%22commandArgument%22%3A%22%22%2C%22autoPostBack%22%3Atrue%2C%22selectedToggleStateIndex%22%3A0%2C%22validationGroup%22%3Anull%2C%22readOnly%22%3Afalse%2C%22primary%22%3Afalse%2C%22enabled%22%3Atrue%7D&ctl00_MainContent_btnOrderHistoryDownload_ClientState=%7B%22text%22%3A%22Download%22%2C%22value%22%3A%22%22%2C%22checked%22%3Afalse%2C%22target%22%3A%22%22%2C%22navigateUrl%22%3A%22%22%2C%22commandName%22%3A%22%22%2C%22commandArgument%22%3A%22%22%2C%22autoPostBack%22%3Afalse%2C%22selectedToggleStateIndex%22%3A0%2C%22validationGroup%22%3Anull%2C%22readOnly%22%3Afalse%2C%22primary%22%3Afalse%2C%22enabled%22%3Afalse%7D&ctl00_MainContent_lstOrderHistory_ClientState="""  # your long string
    yesterday = get_yesterday_formatted()

    payload = dict(parse_qsl(query))
    payload.update({
        "__VIEWSTATE": viewstate,
        "__VIEWSTATEGENERATOR": viewstate_gen,
        "__EVENTVALIDATION": event_validation,
        # Main date inputs (ISO format)
        'ctl00$MainContent$cboStartDate': yesterday['date_iso'],
        'ctl00$MainContent$cboEndDate': yesterday['date_iso'],

        # Date input text boxes (M/D/YYYY format)
        'ctl00$MainContent$cboStartDate$dateInput': yesterday['date_mdY'],
        'ctl00$MainContent$cboEndDate$dateInput': yesterday['date_mdY'],

        # ClientState for date inputs (JSON-like string, but we treat as dict after parsing)
        'ctl00_MainContent_cboStartDate_dateInput_ClientState': f'{{"enabled":true,"emptyMessage":"","validationText":"{yesterday["date_full"]}","valueAsString":"{yesterday["date_full"]}","minDateStr":"1980-01-01-00-00-00","maxDateStr":"2099-12-31-00-00-00","lastSetTextBoxValue":"{yesterday["date_mdY"]}"}}',
        'ctl00_MainContent_cboEndDate_dateInput_ClientState': f'{{"enabled":true,"emptyMessage":"","validationText":"{yesterday["date_full"]}","valueAsString":"{yesterday["date_full"]}","minDateStr":"1980-01-01-00-00-00","maxDateStr":"2099-12-31-00-00-00","lastSetTextBoxValue":"{yesterday["date_mdY"]}"}}',

        # Selected dates in calendar (as JSON string of list of lists)
        'ctl00_MainContent_cboStartDate_calendar_SD': f'[[{yesterday["date_iso"].split("-")[0]},{int(yesterday["date_iso"].split("-")[1])},{int(yesterday["date_iso"].split("-")[2])}]]',
        'ctl00_MainContent_cboEndDate_calendar_SD': f'[[{yesterday["date_iso"].split("-")[0]},{int(yesterday["date_iso"].split("-")[1])},{int(yesterday["date_iso"].split("-")[2])}]]',

        # Active dates (usually includes min, max, and selected) - preserve range, just update selected
        'ctl00_MainContent_cboStartDate_calendar_AD': f'[[1980,1,1],[2099,12,30],[{yesterday["date_iso"].split("-")[0]},{int(yesterday["date_iso"].split("-")[1])},{int(yesterday["date_iso"].split("-")[2])}]]',
        'ctl00_MainContent_cboEndDate_calendar_AD': f'[[1980,1,1],[2099,12,30],[{yesterday["date_iso"].split("-")[0]},{int(yesterday["date_iso"].split("-")[1])},{int(yesterday["date_iso"].split("-")[2])}]]',

        # Clear any previous ClientState for the dropdowns (optional, but safe)
        'ctl00_MainContent_cboStartDate_ClientState': '',
        'ctl00_MainContent_cboEndDate_ClientState': '',

    })
    headers = {
        "Content-Type": "application/x-www-form-urlencoded",
        "Origin": "https://partner.elliemd.com",
        "Referer": ORDER_HISTORY_URL,
        "User-Agent": "Mozilla/5.0",
    }

    r = await session.post(ORDER_HISTORY_URL, data=payload, headers=headers)
    previous_day = []
    if r.status_code != 200:
        return {"status": "Failed to fetch listing"}
    else:
        res = Selector(text=r.text)
        rows = res.xpath("//div[@class='fsOrderHistoryList']//div[contains(@class,'fsOrderRow')]")
        print(f"Total rows found: {len(rows)}")
        for row in rows:
            customer = row.xpath("./*[contains(@class,'fsOrderShipRecipient')]/span[contains(@id,'OrderStatValueShippingRecipient')]/text()").get('')
            if customer:
                print(f"Getting customer: {customer}")
                order_id = row.xpath("./*[contains(@class,'fsOrderNumber ')]//span/@orderid").get('')
                url = f"https://partner.elliemd.com/MemberToolsDotNet/Reports/FirestormOrderReceipt.aspx?OrderID={order_id}"
                r = await session.get(url)
                if r.status_code != 200:
                    return {"status": "Failed to fetch order details", "data": r.text}
                res = Selector(text=r.text)                
                previous_day.append({
                    "status": r.status_code,
                    "order": { 
                        "order_id": order_id,
                        "order_data": res.xpath("//td[text()='Order Date:']/following-sibling::td/text()").get('').strip(),
                        "order_status": res.xpath("//td[text()='Order Status:']/following-sibling::td/text()").get('').strip()
                        },
                    "shipping_address": { 
                        "name":res.xpath("(//table[@class='SCNODShipToTable']//td[1]/text())[1]").get('').strip(),
                        "street": res.xpath("(//table[@class='SCNODShipToTable']//td[1]/text())[2]").get('').strip(),
                        "city/state/zip": res.xpath("(//table[@class='SCNODShipToTable']//td[1]/text())[3]").get('').strip(),
                        "phone": res.xpath("(//table[@class='SCNODShipToTable']//td[1]/text())[4]").get('').strip(),
                        "email": res.xpath("(//table[@class='SCNODShipToTable']//td[1]/text())[5]").get('').strip()
                        },
                    "products": [ 
                        {
                            'product#': res.xpath("//tr[@class='SCNODProductTableOddRow']/td[1]/text()").get('').strip(),
                            'description': res.xpath("//tr[@class='SCNODProductTableOddRow']/td[2]/text()").get('').strip(),
                            'quantity': res.xpath("//tr[@class='SCNODProductTableOddRow']/td[3]/text()").get('').strip(),
                            'commissionable': res.xpath("//tr[@class='SCNODProductTableOddRow']/td[4]/text()").get('').strip(),
                            'line_total': res.xpath("//tr[@class='SCNODProductTableOddRow']/td[5]/text()").get('').strip()
                        }
                        ],
                    "payment": {
                        'method': res.xpath("//*[contains(text(),'Payment Method')]/text()").get('').replace('Payment Method:', '').strip(), 
                        }
                })
        if previous_day:
            return {"status": "success", "data": previous_day}
        else:
            return {"status": "no_orders", "data": []}
        
@app.get("/")
async def root():
    return {"message": "API is running"}


@app.post("/last")
async def fetch_last(request: Request):
    body = await request.json()
    username = body.get("username")
    password = body.get("password")
    retries = 3
    for attempt in range(retries):
        try:
            async with httpx.AsyncClient(follow_redirects=True, timeout=200) as session:
                result = await login(
                    username, password, session
                )
                print(f"Login attempt {attempt + 1}: {result}")
                if not result.get("status"):
                    return {"error": "Invalid credentials"}
                if result.get("status"):
                    print("Login successful, fetching listing...")
                    listing = await fetch_last_listing(
                        session
                    )
                    return listing
        except:
            print(f"Attempt {attempt + 1} failed, retrying...")
            if attempt == retries - 1:
                return {"error": "Failed to fetch invoice after multiple attempts"}
            
            

@app.post("/fetch")
async def fetch_invoice(request: Request):
    body = await request.json()
    username = body.get("username")
    password = body.get("password")
    customer_name = body.get("customer_name")
    retries = 3
    for attempt in range(retries):
        try:
            async with httpx.AsyncClient(follow_redirects=True, timeout=200) as session:
                result = await login(
                    username, password, session
                )
                print(f"Login attempt {attempt + 1}: {result}")
                if not result.get("status"):
                    return {"error": "Invalid credentials"}
                if result.get("status"):
                    print("Login successful, fetching listing...")
                    listing = await fetch_listing(
                        session,
                        customer_name
                    )
                    return listing
        except:
            print(f"Attempt {attempt + 1} failed, retrying...")
            if attempt == retries - 1:
                return {"error": "Failed to fetch invoice after multiple attempts"}
            
            

@app.post("/leads")
async def fetch_invoice(request: Request):
    body = await request.json()
    username = body.get("username")
    password = body.get("password")
    retries = 3
    for attempt in range(retries):
        try:
            async with httpx.AsyncClient(follow_redirects=True, timeout=200) as session:
                result = await login(
                    username, password, session
                )
                print(f"Login attempt {attempt + 1}: {result}")
                if not result.get("status"):
                    return {"error": "Invalid credentials"}
                if result.get("status"):
                    print("Login successful, fetching leads...")
                    leads = await fetch_leads(
                        session
                    )
                    return leads
        except:
            print(f"Attempt {attempt + 1} failed, retrying...")
            if attempt == retries - 1:
                return {"error": "Failed to fetch invoice after multiple attempts"}
            
            